import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import OTPModel from './OTPModel';
import * as preApprovalServices from '../../../modules/preApproval/services/preApprovalServices';

// Mock the services
jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getRandomChallenge: jest.fn(),
  getGenerateOtp: jest.fn(),
  getVerifyOtp: jest.fn(),
  getEnquiryData: jest.fn(),
  getDedupeData: jest.fn(),
}));

// Mock the Redux store
const mockStore = configureStore([thunk]);

describe('OTPModel Component', () => {
  let initialState;
  let store;

  beforeEach(() => {
    // Define initial state for the Redux store
    initialState = {
      stages: {
        stages: [{ 
          stageId: 1, 
          stageInfo: { 
            products: [{ product_type: 'test' }],
            applicants: [{ mobile_number: '1234567890' }] 
          } 
        }],
        userInput: {
          applicants: [{ mobile_number: '1234567890' }]
        }
      },
      preApproval: {
        formConfigmetaData: {
          application: { channel_reference: 'test-ref' },
          products: [{ product_type: 'test' }]
        }
      },
      model: {
        toggleModel: false
      }
    };

    store = mockStore(initialState);

    // Mock the services to return successful responses
    preApprovalServices.getRandomChallenge.mockResolvedValue({
      status: 200,
      data: { 
        data: { 
          attributes: { challenge: 'test-challenge' } 
        } 
      }
    });

    preApprovalServices.getGenerateOtp.mockResolvedValue({
      status: 200,
      data: { 
        data: { 
          attributes: { 'otp-prefix': 'TEST' } 
        } 
      }
    });
  });

  test('renders OTP input fields', async () => {
    render(
      <Provider store={store}>
        <OTPModel />
      </Provider>
    );

    // Wait for the component to render
    await waitFor(() => {
      // Check if OTP input fields are rendered
      const otpInputs = screen.getAllByRole('textbox');
      expect(otpInputs).toHaveLength(6);
    });
  });

  test('handles OTP input and verification', async () => {
    // Mock verify OTP service
    preApprovalServices.getVerifyOtp.mockResolvedValue({
      status: 201
    });

    // Mock subsequent services
    preApprovalServices.getEnquiryData.mockResolvedValue({
      status: 200,
      data: {
        application: { application_status: 'Active' }
      }
    });

    preApprovalServices.getDedupeData.mockResolvedValue({
      status: 200,
      data: {
        application: { 
          response_type: 'INFO', 
          response_action: 'SUCCESS' 
        },
        applicants: [],
        stage: { next_page_values: [] }
      }
    });

    render(
      <Provider store={store}>
        <OTPModel />
      </Provider>
    );

    // Wait for inputs to be available
    await waitFor(() => {
      const otpInputs = screen.getAllByRole('textbox');
      
      // Simulate entering OTP
      otpInputs.forEach((input, index) => {
        fireEvent.change(input, { target: { value: `${index + 1}` } });
      });
    });

    // Verify that inputs have been filled
    const otpInputs = screen.getAllByRole('textbox');
    otpInputs.forEach((input, index) => {
      expect(input).toHaveValue(`${index + 1}`);
    });
  });

  test('handles OTP generation when timer expires', async () => {
    jest.useFakeTimers();

    render(
      <Provider store={store}>
        <OTPModel />
      </Provider>
    );

    // Fast-forward timer
    jest.advanceTimersByTime(100000);

    // Check if "Resend OTP" option appears
    await waitFor(() => {
      const resendButton = screen.getByText(/Resend/i);
      expect(resendButton).toBeInTheDocument();
    });

    jest.useRealTimers();
  });

  // Add more test cases as needed
});
