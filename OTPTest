import React from 'react';
import { shallow } from 'enzyme';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import OTPModel from './OTPModel'; // Adjust the import according to your directory structure.
// Mocking necessary functions
import * as redux from 'react-redux';
import { getRandomChallenge, getGenerateOtp } from '../../../modules/preApproval/services/preApprovalServices';

jest.mock('../../../modules/preApproval/services/preApprovalServices');

const mockStore = configureStore();
const store = mockStore({
  stages: {
    stages: [],
    userInput: {
      applicants: [{
        mobile_number: '1234567890',
      }],
    },
  },
  preApproval: {
    formConfigmetaData: {
      application: {
        channel_reference: 'some_reference',
      },
      products: [{}],
    },
  },
  model: {
    toggleModel: false,
  },
});

describe('OTPModel', () => {
  let useDispatchSpy;

  beforeEach(() => {
    useDispatchSpy = jest.spyOn(redux, 'useDispatch');
    useDispatchSpy.mockReturnValue(jest.fn());
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render correctly with initial state', () => {
    const wrapper = shallow(
      <Provider store={store}>
        <OTPModel />
      </Provider>
    ).dive().dive(); // Diving twice because of the Provider

    expect(wrapper.exists()).toBe(true);
  });

  it('should call generateOtp on mount', () => {
    const generateOtpMock = jest.fn();
    jest.spyOn(OTPModel.prototype, 'generateOtp').mockImplementation(generateOtpMock);

    shallow(
      <Provider store={store}>
        <OTPModel />
      </Provider>
    ).dive().dive();

    expect(generateOtpMock).toHaveBeenCalled();
  });

  it('should display OTP expired message when timer gets to zero', () => {
    jest.useFakeTimers();

    const wrapper = shallow(
      <Provider store={store}>
        <OTPModel />
      </Provider>
    ).dive().dive();

    // Simulate the timer reducing to zero
    wrapper.setState({ seconds: 1 });
    wrapper.setState({ seconds: 0 });

    wrapper.update();

    expect(wrapper.find('.otp-alert-icon').exists()).toBe(true);
    expect(wrapper.find('.Your-last-requested').exists()).toBe(true);
  });

  // Other tests to cover further functionality...

});
