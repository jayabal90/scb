import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import OTPModel from './OTPModel';
import { useSelector, useDispatch } from 'react-redux';
import * as preApprovalServices from '../../../modules/preApproval/services/preApprovalServices';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getRandomChallenge: jest.fn(),
  getGenerateOtp: jest.fn(),
  getVerifyOtp: jest.fn(),
  getDedupeData: jest.fn(),
  getEnquiryData: jest.fn(),
}));

describe('<OTPModel />', () => {
  const mockDispatch = jest.fn();
  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation((selectorFn) => {
      if (selectorFn.name === 'stageSelector') {
        return [{ stageInfo: { applicants: [{ mobile_number: '+852-12345678' }] } }];
      }
      if (selectorFn.name === 'auth') {
        return { sessionUid: 'testSessionUID' };
      }
      if (selectorFn.name === 'preApproval') {
        return {
          formConfigmetaData: {
            application: {
              channel_reference: 'testChannelReference',
            },
            products: [{ product_type: 'testType' }],
          },
          otpData: {},
          randomChallengeData: {},
        };
      }
      // Specify other selectors as needed...
      return {};
    });
  });

  test('renders OTP input fields and submits OTP', async () => {
    render(<OTPModel />);

    // Check if the OTP input fields are visible
    const otpInputs = screen.getAllByRole('textbox');
    expect(otpInputs).toHaveLength(6); // There should be 6 OTP input fields

    // Simulate entering OTP
    otpInputs.forEach((input, index) => {
      fireEvent.change(input, { target: { value: index + 1 } }); // Enter '1', '2', '3', '4', '5', '6'
    });

    // Mock API behavior
    preApprovalServices.getRandomChallenge.mockResolvedValueOnce({
      status: 200,
      data: { attributes: { /*...Response data*/ }},
    });
    preApprovalServices.getVerifyOtp.mockResolvedValueOnce({
      status: 201,
      data: { /*...Response data*/ },
    });

    // Find the submit button or trigger the correct method to validate OTP
    // You'll need to adjust this part based on your implementation if there's a submit button
    fireEvent.change(otpInputs[0], { target: { value: '1' } });
    
    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalled(); // Check if the dispatch was called
      // Add here additional expectations based on what should happen after OTP verification
    });

    // Check if the appropriate success or error message appears based on the mocked response
    expect(screen.queryByText(/success message/i)).toBeInTheDocument();
  });

  test('displays error message when OTP is invalid', async () => {
    render(<OTPModel />);

    const otpInputs = screen.getAllByRole('textbox');
    
    // Simulate entering OTP
    otpInputs.forEach((input, index) => {
      fireEvent.change(input, { target: { value: index + 1 } }); // Enter '123456'
    });

    preApprovalServices.getVerifyOtp.mockResolvedValueOnce({
      status: 400,
      data: { /*...Error response data*/ },
    });

    // Trigger the OTP verification function
    fireEvent.change(otpInputs[0], { target: { value: '1' } });
    
    await waitFor(() => {
      expect(screen.queryByText(/invalid otp/i)).toBeInTheDocument();
    });
  });
});
