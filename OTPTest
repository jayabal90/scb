import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import OTPModel from './OTPModel'; // Adjust the import as necessary
import { getRandomChallenge, getGenerateOtp, getVerifyOtp } from '../../../modules/preApproval/services/preApprovalServices';

// Mocking the API service functions 
jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getRandomChallenge: jest.fn(),
  getGenerateOtp: jest.fn(),
  getVerifyOtp: jest.fn(),
}));

const mockStore = configureStore([]);
const store = mockStore({
  stages: {
    // Set initial state based on your application state
    userInput: { applicants: [{ mobile_number: '+852-88389099' }] },
    journeyType: 'test',
    stages: [{ stageId: 'test', stageInfo: {} }],
  },
  preApproval: {
    formConfigmetaData: { application: { channel_reference: 'channel_ref_123' }, products: [{}] },
  },
});

describe('OTPModel Component', () => {
  beforeEach(() => {
    render(
      <Provider store={store}>
        <OTPModel />
      </Provider>
    );
  });

  test('renders without crashing', () => {
    expect(screen.getByText(/Enter the 6-digit code sent/i)).toBeInTheDocument();
  });

  test('displays OTP input fields', () => {
    const inputFields = screen.getAllByRole('textbox');
    expect(inputFields.length).toBe(6); // Ensure there are 6 input fields
  });

  test('requests a new OTP', async () => {
    getRandomChallenge.mockResolvedValueOnce({ status: 201, data: { attributes: {} } });
    getGenerateOtp.mockResolvedValueOnce({ status: 200, data: { data: { attributes: {} } } });

    fireEvent.click(screen.getByText(/Resend Otp/i));

    await waitFor(() => {
      expect(getRandomChallenge).toHaveBeenCalledTimes(1);
      expect(getGenerateOtp).toHaveBeenCalledTimes(1);
    });
  });

  test('handles user input in OTP fields', () => {
    const firstInput = screen.getByLabelText(/otp1/i);
    fireEvent.change(firstInput, { target: { value: '1' } });
    expect(firstInput.value).toBe('1');
  });

  test('displays expired OTP message', async () => {
    // Simulate expiry handling in your component, either through state or props.
    fireEvent.click(screen.getByText(/Resend Otp/i)); // Trigger resend to demonstrate the behavior
    await waitFor(() => expect(screen.getByText(/Your last requested OTP has expired/i)).toBeInTheDocument());
  });

  test('successful OTP verification', async () => {
    getRandomChallenge.mockResolvedValueOnce({ status: 200, data: { attributes: {} } });
    getVerifyOtp.mockResolvedValueOnce({ status: 201 });

    // Simulate user entering the OTP
    const otpInputs = screen.getAllByRole('textbox');
    otpInputs.forEach((input, index) => {
      fireEvent.change(input, { target: { value: (index + 1).toString() } });
    });

    fireEvent.click(screen.getByText(/Submit/i)); // Assuming there's a Submit button

    await waitFor(() => {
      expect(getVerifyOtp).toHaveBeenCalled();
      expect(screen.getByText(/Successfully verified OTP/i)).toBeInTheDocument(); // Change to your success message
    });
  });

  test('displays invalid OTP message', async () => {
    getRandomChallenge.mockResolvedValueOnce({ status: 200, data: { attributes: {} } });
    getVerifyOtp.mockResolvedValueOnce({ status: 401 });

    // Simulate user entering the OTP
    const otpInputs = screen.getAllByRole('textbox');
    otpInputs.forEach((input, index) => {
      fireEvent.change(input, { target: { value: '0' } });
    });

    fireEvent.click(screen.getByText(/Submit/i)); // Assuming there's a Submit button

    await waitFor(() => {
      expect(screen.getByText(/Invalid OTP/i)).toBeInTheDocument(); // Change to your error message
    });
  });
});
