import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import OTPModel from "./OTPModel"; // Adjust the import path as necessary
import { useDispatch, useSelector } from "react-redux";
import * as redux from 'react-redux';

// Mock data for Redux store state
const mockState = {
  stages: {
    stages: [{ stageInfo: { applicants: [{ mobile_number: "+852-88389099" }] }, stageId: "someStageId" }],
    userInput: { applicants: [{ mobile_number: "+852-88389099" }] },
    journeyType: "someJourneyType"
  },
  preApproval: {
    formConfigmetaData: {},
    otpData: {},
    randomChallengeData: {}
  },
  auth: {
    sessionUid: "someSessionUid"
  },
  error: {},
  lov: {},
  valueUpdate: {}
};

const mockDispatch = jest.fn();

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

beforeEach(() => {
  redux.useDispatch.mockReturnValue(mockDispatch);
  redux.useSelector.mockImplementation((selector) => selector(mockState));
});

describe("OTPModel Component", () => {
  test("renders OTP model component", async () => {
    render(<OTPModel />);
    
    // Check if mobile number is displayed correctly and OTP input is present
    expect(screen.getByText(/Enter the 6-digit code sent to/i)).toBeInTheDocument();
    expect(screen.getAllByRole('textbox')).toHaveLength(6); // Assuming there are 6 input boxes for OTP
  });

  test("shows error message when incorrect OTP is entered", async () => {
    render(<OTPModel />);

    // Fill all OTP inputs with incorrect values
    fireEvent.change(screen.getByLabelText(/otp1/i), { target: { value: '1' } });
    fireEvent.change(screen.getByLabelText(/otp2/i), { target: { value: '2' } });
    fireEvent.change(screen.getByLabelText(/otp3/i), { target: { value: '3' } });
    fireEvent.change(screen.getByLabelText(/otp4/i), { target: { value: '4' } });
    fireEvent.change(screen.getByLabelText(/otp5/i), { target: { value: '5' } });
    fireEvent.change(screen.getByLabelText(/otp6/i), { target: { value: '6' } });

    // Simulate verify OTP functionality
    fireEvent.click(screen.getByText(/verify/i)); // Assuming there's a button to verify the OTP

    // Expecting the error message to be displayed
    expect(screen.getByText(/incorrect otp/i)).toBeInTheDocument();
  });

  test("resends OTP on request", async () => {
    render(<OTPModel />);

    // Simulate the "didn't receive OTP" action
    fireEvent.click(screen.getByText(/resend otp/i)); // Assuming 'Resend Otp?' is the text for the button

    // Expect a specific behavior or state change, maybe a timer resets
    expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function)); // Check if appropriate dispatch action is called
  });

  test("shows expiration warning if OTP expires", async () => {
    render(<OTPModel />);
    
    // Simulate time passing until the OTP expires
    jest.advanceTimersByTime(100000); // You might want to use jest runAllTimers or similar based on your timer implementation
    
    // Now check if the message shows that the OTP has expired
    expect(screen.getByText(/Your last requested OTP has expired/i)).toBeInTheDocument();
  });

  // Other test cases can be added similarly
});
