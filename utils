import { AppDispatch } from "../../../services/common-service";
import { FindIndex } from "../../../utils/common/change.utils";
import { KeyWithAnyModel, StageDetails } from "../../../utils/model/common-model";
import { taxStoreModel } from "../../../utils/model/common-model"


export const getFields = (getStages: Array<StageDetails>, taxSelector: taxStoreModel, action: string): any => {
    return (dispatch: AppDispatch) => {
        let fields: Array<KeyWithAnyModel> | undefined;

        const stageId = getStages[0] && getStages[0].stageId;
        const stageIndex = FindIndex(getStages[0] && getStages[0].stageInfo, stageId);
        fields = getStages[0] && getStages[0].stageInfo.fieldMetaData.data.stages[stageIndex].fields;
        let newFileds: Array<KeyWithAnyModel> = [];

        let getClonedField = (logical_field_name: string) => {
            if (fields) {
                let field = fields.find(field => field.logical_field_name === logical_field_name);
                if (field && field.logical_field_name) {
                    return { ...field };
                } else {
                    return null;
                }
            } else {
                return null;
            }
        }

        let country_of_tax_residence = getClonedField('country_of_tax_residence');
        let tax_id_no = getClonedField('tax_id_no');

        const getSequence = () => {
            for (let i = 1; i <= taxSelector.maxCount; i++) {
                let isItemFound = false;
                taxSelector.fields.forEach((field: string, index: number) => {
                    if (
                        field &&
                        field.split("_")[4] === i.toString() &&
                        index % 2 === 0
                    ) {
                        isItemFound = true;
                    }
                });
                if (!isItemFound) {
                    return i;
                }
            }
        };

        taxSelector && taxSelector.fields && taxSelector.fields.forEach((field: string) => {
            if (
                field &&
                field.split("_")[0] === "country" &&
                country_of_tax_residence
            ) {
                country_of_tax_residence.logical_field_name = field;
                newFileds.push({ ...country_of_tax_residence });
            } else if (field.split("_")[0] === "tax" && tax_id_no) {
                tax_id_no.logical_field_name = field;
                newFileds.push({ ...tax_id_no });
            }
        });

        return newFileds;
    }
}
