import { useState, useEffect } from "react";
import renderComponent from "../../../modules/dashboard/fields/renderer";
import { KeyWithAnyModel, StoreModel } from "../../../utils/model/common-model";
import "./authorize.scss";
import { useDispatch, useSelector } from "react-redux";
import { getFields } from "./authorize.utils";
import InfoTooltips from "../info-tooltips/info-tooltips";
import { CONSTANTS } from "../../../utils/common/constants";
import Model from "../model/model";
import PopupModel from "../popup-model/popup-model";
import declarationConstant from "../../../assets/_json/declaration.json";
import { fieldError, getDeviceType, getUrl } from "../../../utils/common/change.utils";
import { checkboxAction } from "../../../utils/store/checkbox-slice";
import { isFieldUpdate } from "../../../utils/common/change.utils";
import reviewpageData from "../../../assets/_json/review.json";
import { ValueUpdateAction } from "../../../utils/store/value-update-slice";
import trackEvents from "../../../services/track-events";

const AuthorizeComponent = (props: any) => {

  const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
  const reviewdata: KeyWithAnyModel = reviewpageData.reviewPage;
  const language = getUrl.getLanguageInfo("lang");
  let lang = '';
  if (language) {
    lang = language;
  } else {
    lang = 'EN'
  }

  let marketing_EN = 'Postal Mail, Mobile Message, Email, Phone Call (all calls)';
  let marketing_CN = '邮递, 手機訊息, 電郵, 电话（所有来电）';
  let marketing_HK = '郵遞, 手機訊息, 電郵, 電話（所有來電）'


  const dispatch = useDispatch();
  const [field, setField] = useState([]);
  const prePopulatedCheckbox = ((props.data) && (props.data.logical_field_name === "marketing_post" || props.data.logical_field_name === "marketing_mobile_message" || props.data.logical_field_name === "marketing_email" || props.data.logical_field_name === "marketing_phone_all"));
  const [checked, setChecked] = useState(prePopulatedCheckbox ? true : false);
  const [checkAll, setCheckAll] = useState('');
  const [marketValue, setMarketValue] = useState(language === CONSTANTS.LANG_EN ? marketing_EN : language === CONSTANTS.LANG_CN ? marketing_CN : marketing_HK);
  const [errors, setErrors] = useState(false);
  const [showPopup, setShowPopup] = useState(false);
  const [openpopup, setOpenpop] = useState(false);
  const checkboxConditional: KeyWithAnyModel = [
    { 'label': 'marketing_post', 'value': 'Y', 'checked': true },
    { 'label': 'marketing_mobile_message', 'value': 'Y', 'checked': true },
    { 'label': 'marketing_email', 'value': 'Y', 'checked': true },
    { 'label': 'marketing_phone_all', 'value': 'Y', 'checked': true },
    { 'label': 'marketing_phone_rm', 'value': 'N', 'checked': false },
  ];
  const checkboxConditionalSelector = useSelector((state: StoreModel) => state.checkboxSlice.selectedvalue);
  const declarationContent: KeyWithAnyModel = declarationConstant;
  const declarationInputLoop = declarationContent.bankingService;
  const [pdfName, setPdfName] = useState({});
  const getCheckboxSelector = () => {
    return checkboxConditionalSelector ? JSON.parse(checkboxConditionalSelector) : checkboxConditional
  }
  const applicantsSelector = useSelector(
    (state: StoreModel) => state.stages.userInput.applicants[0]
  );

  const fieldErrorSelector = useSelector(
    (state: StoreModel) => state.fielderror.error
  );

  let updatedField = applicantsSelector;
  const confirm_direct_marketing = updatedField?.["marketing_post"] === 'N' && updatedField["marketing_mobile_message"] === 'N' &&
      updatedField["marketing_email"] === 'N' && updatedField["marketing_phone_all"] === 'N' && updatedField["marketing_phone_rm"] === 'N';

  let marketingPost = updatedField && updatedField["marketing_post"];
  let marketingMobileMessage = updatedField && updatedField["marketing_mobile_message"];
  let marketingEmail = updatedField && updatedField["marketing_email"];
  let marketingPhoneAll = updatedField && updatedField["marketing_phone_all"];
  let marketingPhoneRm = updatedField && updatedField["marketing_phone_rm"];

  useEffect(() => {     // Initial checked state for checkbox
    if (stageSelector && stageSelector?.[0] && stageSelector?.[0].stageInfo && stageSelector?.[0].stageInfo.applicants[0]) {
        const checkValue = stageSelector?.[0].stageInfo.applicants[0][props.data.logical_field_name] || updatedField[props.data.logical_field_name];
        setChecked(checkValue === "Y" ? true : false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const fieldUpdate = (filedName: string, value: string | number | null | '') => {
    props.handleCallback(props.data, value);
    dispatch(isFieldUpdate(props, value, filedName));
  }

  useEffect(() => {       //Initial state of screens checkbox
    if (stageSelector?.[0] && stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.RP) {
      if (props.data.logical_field_name === "client_declaration_cert" || props.data.logical_field_name === "acknowledgement_cert") {
        fieldUpdate(props.data.logical_field_name, stageSelector?.[0].stageInfo.applicants?.[0][props.data.logical_field_name] || updatedField[props.data.logical_field_name]
          ? stageSelector?.[0].stageInfo.applicants[0][props.data.logical_field_name] || updatedField[props.data.logical_field_name] : CONSTANTS.LOV_DATA.NO)
      }
    }

    if (stageSelector?.[0] && stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_2/* && checkAll === "" && showPopup === false*/) {
   
      if(prePopulatedCheckbox || props.data.logical_field_name === "marketing_phone_rm"){
       
          fieldUpdate("marketing_post", marketingPost ? marketingPost : checked ? 'Y' : 'N');
          fieldUpdate("marketing_mobile_message", marketingMobileMessage ? marketingMobileMessage : checked ? 'Y' : 'N');
          fieldUpdate("marketing_email", marketingEmail ? marketingEmail : checked ? 'Y' : 'N');
          fieldUpdate("marketing_phone_all", marketingPhoneAll ? marketingPhoneAll : checked ? 'Y' : 'N');
          fieldUpdate("marketing_phone_rm", marketingPhoneRm ? marketingPhoneRm : 'N');
      }
      fieldUpdate("direct_marketing", marketValue);
  }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  useEffect(() => {
    if (stageSelector?.[0] && stageSelector?.[0].stageId !== CONSTANTS.STAGE_NAMES.AD_2 && stageSelector?.[0].stageInfo) {
      if (stageSelector?.[0].stageInfo.applicants[0][props.data.logical_field_name] === null
        || stageSelector?.[0].stageInfo.applicants[0][props.data.logical_field_name] === 'N'
        || stageSelector?.[0].stageInfo.applicants[0][props.data.logical_field_name] === undefined) {
        setErrors(fieldError(fieldErrorSelector, props));
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [fieldErrorSelector]);

  useEffect(() => {
    if (stageSelector?.[0] && stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_2) {
      
      const language = getUrl.getLanguageInfo("lang");

      const phone_call = updatedField["marketing_phone_all"] === 'Y' ? language === CONSTANTS.LANG_EN ? 'Phone Call (all calls), ' : language === CONSTANTS.LANG_CN ? '电话（所有来电）*,' : '電話（所有來電）*,' : '';
  
      const phone_call_1 = (updatedField["marketing_phone_rm"] === 'Y' && updatedField["marketing_phone_all"] === 'N') ? language === CONSTANTS.LANG_EN ? 'Phone Calls (except calls from Relationship Managers or Premium Executives), ' : language === CONSTANTS.LANG_CN ? '电话﹙客戶经理或Premium理财经理以外之所有來电﹚,' : '電話(客戶經理或Premium理財經理以外之所有來電),' : '';
  
      const email = updatedField["marketing_email"] === 'Y' ? language === CONSTANTS.LANG_EN ? 'Email, ' : language === CONSTANTS.LANG_CN ? '电子邮件地址,' : '電子郵件地址,' : '';
  
      const mobile_message = updatedField["marketing_mobile_message"] === 'Y' ? language === CONSTANTS.LANG_EN ? 'Mobile Message, ' : language === CONSTANTS.LANG_CN ? '短信,' : '短信,' : '';
  
      const post = updatedField["marketing_post"] === 'Y' ? language === CONSTANTS.LANG_EN ? 'Postal Mail, ' : language === CONSTANTS.LANG_CN ? '邮递,' : '郵遞,' : '';
  
      let direct_marketing = email + mobile_message + phone_call_1 + phone_call + post;
  
      if (direct_marketing !== null && direct_marketing !== undefined && direct_marketing !== '') {
          const end = language === CONSTANTS.LANG_EN ? -2 : -1;
          direct_marketing = direct_marketing.slice(0, end);
      }

      if(confirm_direct_marketing){
        setMarketValue('');
      }else{
        setMarketValue(direct_marketing);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [updatedField, showPopup])

  useEffect(() => {
   if (props.data || stageSelector?.[0]){
    const radioResidency = {
      logical_field_name: props.data.logical_field_name,
      value: checked ? 'Y' : 'N'
    };
    const stageComponents = dispatch(
      getFields(stageSelector, radioResidency)
    );
    if (props.data.logical_field_name === "marketing_phone_all" /*|| radioResidency.logical_field_name === 'marketing_phone_rm'*/) {
      setField(stageComponents);
    }

    if (stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_1) {
      fieldUpdate(props.data.logical_field_name, checked ? 'Y' : 'N');
    }
    if (stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_2 && showPopup === false) {
      const communicationArray = getCheckboxSelector();
      communicationArray.map((item: KeyWithAnyModel) => {
        if (item.label === props.data.logical_field_name) {
          setChecked(item.checked);
          if(confirm_direct_marketing){
            fieldUpdate("direct_marketing", null);
          }else{
            fieldUpdate("direct_marketing", marketValue);
          }
        }
        return item;
      })
    }
  }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [checked, marketValue]);

  const chooseAgain = () => {
    if (stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_2 && checkAll !== "unCheck") {
      const communicationArray = checkboxConditional;
      dispatch(checkboxAction.updateCheckbox(communicationArray));
      setCheckAll("check");
    }
    setShowPopup(false);
  }

  const Confirm = () => {
    if (stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_2 && checkAll !== "check") {
      const communicationArray = getCheckboxSelector();
      communicationArray.map((item: KeyWithAnyModel) => {
        if (item.label === props.data.logical_field_name) {
          item.value = 'N';
          item.checked = false;
        }
        return item;
      })
      dispatch(checkboxAction.updateCheckbox(communicationArray));
      setCheckAll("unCheck");
    }
    setShowPopup(false);
  }



  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    let eventValue = (event.target.value !== 'N') ? 'N' : 'Y';
    setChecked(event.target.checked);
    props.updateCheckboxStatus(event.target.checked, props.data.logical_field_name);
    dispatch(ValueUpdateAction.getChangeUpdate({ id: stageSelector?.[0].stageId!, changes: true }));
    if (stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_2) {
      if (props.data.logical_field_name !== "product_service_information_request" || props.data.logical_field_name !== "individual_customer_authority_and_identity") {
        const communicationArray = getCheckboxSelector();
        communicationArray.map((item: KeyWithAnyModel) => {
          setCheckAll('')
          if (showPopup === false) {
            if (checkAll === "") {
             if (item.label === props.data.logical_field_name) {
                item.value = eventValue;
                item.checked = event.target.checked;
              } else if (item.label === "marketing_phone_rm") {
                if (props.data.logical_field_name === "marketing_phone_all" && event.target.checked === false) {
                  item.value = "Y";  //when marketing_phone_all is 'N' then marketing_phone_rm is 'Y'
                  item.checked = true;
                } else if(field.length === 1) {
                  item.value = "N";  //when marketing_phone_rm is in hide it should be 'N'
                  item.checked = false;
                } 
              }
            } else if (checkAll === "check") {
              if (item.label === props.data.logical_field_name && item.label !== "marketing_phone_rm") {
                item.value = 'Y';
                item.checked = true;
              } else if (item.label === "marketing_phone_rm") {
                if (props.data.logical_field_name === "marketing_phone_all" && event.target.checked === true) {
                  item.value = "N";
                  item.checked = false;
                }
              }
            }
            fieldUpdate(item.label, item.value);
          }
          return item;
        })
        dispatch(checkboxAction.updateCheckbox(communicationArray));
        if (checkAll === ""/*checkAll !== "check" && checkAll !=22= "unCheck"*/) {
        if ((communicationArray[0].value === 'N' && communicationArray[1].value === 'N' && communicationArray[2].value === 'N' &&
        communicationArray[3].value === 'N' && communicationArray[4].value === 'N') /*&& confirm_direct_marketing*/) {
        setShowPopup(true);
        setMarketValue('');
      }
        }
      }
    } else {
      handleCallback(props.data, event.target.value);
    }

    if (props.data.logical_field_name === "product_service_information_request" || props.data.logical_field_name === "individual_customer_authority_and_identity") {
      let position = props.data.logical_field_name === 'product_service_information_request' ? '1' : '2'
      setShowPopup(false);
      setPdfName(event)
      event.target.role = position;
      if (event.target.id === 'product_service_information_request' || event.target.id === "individual_customer_authority_and_identity") {
        if (event.target.checked) {
          setOpenpop(true);
        } else {
          setOpenpop(false);
        }
        if (event.target.id === 'product_service_information_request') {
          /* Adobe Analytics - for When user views popup on the form */
          event.target.checked === true && trackEvents.triggerAdobeEvent("popupViewed", 'Products / Services Information Request');
          if (getDeviceType() === 'Desktop') {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + declarationInputLoop[0].pdfDesktopName + '.pdf';
            event.target.innerText = declarationInputLoop[0].pdfDesktopName
          } else {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + declarationInputLoop[0].pdfMobileName + '.pdf';
            event.target.innerText = declarationInputLoop[0].pdfMobileName
          }
          event.target.name = (declarationInputLoop[0][lang].name)
        } else if (event.target.id === 'individual_customer_authority_and_identity') {
          /* Adobe Analytics - for When user views popup on the form */
          event.target.checked === true && trackEvents.triggerAdobeEvent("popupViewed", 'Individual Customer Authority and Identity');
          if (getDeviceType() === 'Desktop') {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + declarationInputLoop[1].pdfDesktopName + '.pdf';
            event.target.innerText = declarationInputLoop[1].pdfDesktopName
          } else {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + declarationInputLoop[1].pdfMobileName + '.pdf';
            event.target.innerText = declarationInputLoop[1].pdfMobileName
          }
          event.target.name = (declarationInputLoop[1][lang].name)
        }
      } else {
        fieldUpdate(props.data.logical_field_name, 'N');
      }
    }
    if (props.data.logical_field_name === "client_declaration_cert" || props.data.logical_field_name === "acknowledgement_cert") {
      let position = props.data.logical_field_name === 'client_declaration_cert' ? '1' : '2'
      fieldUpdate(props.data.logical_field_name, eventValue);
      setPdfName(event)
      event.target.role = position;
      if (event.target.id === 'client_declaration_cert' || event.target.id === "acknowledgement_cert") {
        if (event.target.checked) {
          setOpenpop(true);
        } else {
          setOpenpop(false);
        }
        if (event.target.id === 'client_declaration_cert') {
          /* Adobe Analytics - for When user views popup on the form */
          event.target.checked === true && trackEvents.triggerAdobeEvent("popupViewed", 'Client Declaration');
          if (getDeviceType() === 'Desktop') {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + reviewdata[0].pdfDesktopName + '.pdf';
            event.target.innerText = reviewdata[0].pdfDesktopName
          } else {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + reviewdata[0].pdfMobileName + '.pdf';
            event.target.innerText = reviewdata[0].pdfMobileName
          }
          event.target.name = (reviewdata[0][lang].name)
        } else if (event.target.id === 'acknowledgement_cert') {
          /* Adobe Analytics - for When user views popup on the form */
          event.target.checked === true && trackEvents.triggerAdobeEvent("popupViewed", 'Acknowledgement and Certification');
          if (getDeviceType() === 'Desktop') {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + reviewdata[1].pdfDesktopName + '.pdf';
            event.target.innerText = reviewdata[1].pdfDesktopName
          } else {
            event.target.title = `${process.env.REACT_APP_RTOB_PDF_PROD_URL}` + reviewdata[1].pdfMobileName + '.pdf';
            event.target.innerText = reviewdata[1].pdfMobileName
          }
          event.target.name = (reviewdata[1][lang].name)
        }
      } else {
        fieldUpdate(props.data.logical_field_name, 'N');
      }
    }
  }

  const handleCallback = (fieldName: string, value: string | number) => {
    props.handleCallback(fieldName, value);
  };
  const handleFieldDispatch = (fieldName: string, value: string | number) => {
    props.handleFieldDispatch(fieldName, value);
  };


  // ------------ Checkbox for pdf selection Start -------------- // 
  const agreePDF = (event: React.ChangeEvent<HTMLInputElement>) => {
    setOpenpop(false);
    setChecked(!event);
    if (props.data.logical_field_name === "product_service_information_request" || props.data.logical_field_name === "individual_customer_authority_and_identity") {
      fieldUpdate(props.data.logical_field_name, 'Y');
    }
    if (props.data.logical_field_name === "client_declaration_cert" || props.data.logical_field_name === "acknowledgement_cert") {
      fieldUpdate(props.data.logical_field_name, 'Y');
    }
    trackEvents.triggerAdobeEvent("ctaClick", "Agree"); /* Adobe Analytics - for clicks on a CTA */
    dispatch(ValueUpdateAction.getChangeUpdate({ id: stageSelector?.[0].stageId!, changes: true }));
  }

  const closepdf = (data: any, e: any) => {
    setChecked(data);
    fieldUpdate(props.data.logical_field_name, 'N');
    if (e.target) {
      if (e.target.role) {
        declarationInputLoop.map((response: any) => {
          return response.id === parseInt(e.target.role) ? (response.checked) ? response.checked = false : response.checked = true : response.checked;
        })
        reviewdata.map((response: any) => {
          return response.id === parseInt(e.target.role) ? (response.checked) ? response.checked = false : response.checked = true : response.checked;
        })
      }
      setOpenpop(data);
    } else {
      setOpenpop(data);
    }
    trackEvents.triggerAdobeEvent("ctaClick", "Close Icon"); /* Adobe Analytics - for clicks on a CTA */
  }

  return (
    <>
    {props.data && <>
      <div className={(errors && !checked) ? "authorize-checkbox errMsg" : ((stageSelector?.[0] && stageSelector?.[0].stageId === CONSTANTS.STAGE_NAMES.AD_2) ? 'authorize-checkbox normal authorize__checkbox_ad2' : "authorize-checkbox normal")}>
        <label /*className={(errors && !checked) ? "errMsg" : ""}*/>
          <input type="checkbox" className="weath-connect" value={checked ? 'Y' : 'N'}
            id={props.data.logical_field_name} name={props.data.logical_field_name}
            checked={checked}   ///{props.checkedStatus}
            onChange={handleCheckboxChange}
          />
          <span>{props.data.rwb_label_name}
            {props.data.info_tooltips && props.data.info_tooltips !== "" &&
              <InfoTooltips infoTooltips={
                language === CONSTANTS.LANG_EN ? props.data.info_tooltips : props.data.details

              } />}</span>
          {(showPopup) &&
            <Model name="empty_check" handlebuttonClick={Confirm} handleChooseClick={chooseAgain} />
          }

        </label>
      </div >
      {field &&
        field.map((currentSection: KeyWithAnyModel, index: number) => {
          return renderComponent(
            currentSection,
            index,
            handleCallback,
            handleFieldDispatch,
            props.value,
            props.updateCheckboxStatus
          );
        })
      }
    </>}
      {
        (openpopup) && (
          <PopupModel displayPopup={openpopup}>
            {openpopup && <Model name="" stageId={stageSelector?.[0].stageId} data={pdfName} closepdf={closepdf} agreePDF={agreePDF}> </Model>}
          </PopupModel>
        )
      }
    </>
  )
}

export default AuthorizeComponent;
