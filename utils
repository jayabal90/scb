import { createStore, applyMiddleware } from 'redux';
import { Provider } from 'react-redux';
import thunk from 'redux-thunk';
import { render, screen } from '@testing-library/react';
import axios from 'axios';
import * as actions from '../path_to_your_action_file'; // Adjust the import path
import { store } from '../utils/store/store'; // Your Redux store
import MockAdapter from 'axios-mock-adapter';

let mockAxios;

beforeAll(() => {
  mockAxios = new MockAdapter(axios); // Using mock adapter for axios
});

afterEach(() => {
  mockAxios.reset();
});

describe('Action Creators', () => {
  
  test('dispatchLoader should set isFetching to true/false', async () => {
    const expectedActionTrue = {
      type: 'loader/getState',
      payload: {
        isFetching: true,
      },
    };

    // Mock the dispatch function
    const dispatch = jest.fn();
    await actions.dispatchLoader(true)(dispatch);
    expect(dispatch).toHaveBeenCalledWith(expectedActionTrue);

    const expectedActionFalse = {
      type: 'loader/getState',
      payload: {
        isFetching: false,
      },
    };

    await actions.dispatchLoader(false)(dispatch);
    expect(dispatch).toHaveBeenCalledWith(expectedActionFalse);
  });

  test('dispatchError should capture axios error and dispatch error action', async () => {
    const mockError = {
      response: {
        status: 404,
        statusText: "Not Found"
      },
    };

    const dispatch = jest.fn();
    await actions.dispatchError(mockError)(dispatch);

    expect(dispatch).toHaveBeenCalledWith(actions.errorAction.getError({
      statusCode: 404,
      statusText: "Not Found",
    }));
  });

  test('getLovData should successfully fetch and dispatch lovData', async () => {
    mockAxios.onGet(/lovRef/).reply(200, [
      { CODE_DESC: "Test Desc", CODE_VALUE: "Test Value" }
    ]);

    const expectedAction = {
      type: 'lov/getLovData',
      payload: {
        label: 'someField',
        value: [
          { CODE_DESC: "Test Desc", CODE_VALUE: "Test Value" }
        ],
      },
    };

    const dispatch = jest.fn();
    await actions.getLovData('someField')(dispatch);
    
    expect(dispatch).toHaveBeenCalledWith(expectedAction);
  });

  test('getLovData should handle error in fetching', async () => {
    mockAxios.onGet(/lovRef/).reply(500);
    
    const dispatch = jest.fn();
    await actions.getLovData('someField')(dispatch);
    
    expect(dispatch).toHaveBeenCalledWith(expect.objectContaining({
      type: 'error/getError',
    }));
  });
});
