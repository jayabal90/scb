// Model.test.tsx

import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import Model from './Model';
import * as utils from "../../../utils/common/change.utils";
import modelInfo from "../../../assets/_json/model.json";
import '@testing-library/jest-dom/extend-expect';

// Mock external functions
jest.mock("../../../utils/common/change.utils", () => ({
  getUrl: {
    getLanguageInfo: jest.fn(),
    getChannelRefNo: jest.fn(),
  }
}));

describe('Model Component', () => {
  const mockClosePdf = jest.fn();
  const mockAgreePDF = jest.fn();
  const mockHandleButtonClick = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    utils.getUrl.getLanguageInfo.mockReturnValue('en');
    utils.getUrl.getChannelRefNo.mockReturnValue({ applicationRefNo: '12345' });
  });

  it('renders correctly for empty_check state', () => {
    render(<Model name="empty_check" data={{}} handlebuttonClick={mockHandleButtonClick} />);

    expect(screen.getByText(/continue/i)).toBeInTheDocument();
    expect(screen.getByText(/btn text/i)).toBeInTheDocument(); // Modify according to button text
  });

  it('clicking button triggers handleButtonClick', () => {
    render(<Model name="empty_check" data={{}} handlebuttonClick={mockHandleButtonClick} />);

    const button = screen.getByText(/continue/i); // Modify according to button text
    fireEvent.click(button);

    expect(mockHandleButtonClick).toHaveBeenCalledTimes(1);
  });

  it('renders saveSuccess correctly', () => {
    render(<Model name="saveSuccess" data={{}} closepdf={mockClosePdf} />);

    expect(screen.getByText(/thank you/i)).toBeInTheDocument(); // Adjust based on actual content
    const closeButton = screen.getByRole('button', { name: '' }); // Adjust the accessibility requirement
    fireEvent.click(closeButton);

    expect(window.location.href).toContain(process.env.REACT_APP_HOME_PAGE_URL);
  });

  it('scroll button shows/hides correctly', () => {
    const { container } = render(<Model name="info_tooltips" data={{}} closepdf={mockClosePdf} />);
    const scrollDiv = container.querySelector('#pdfViewer');
    
    // Simulate scrolling
    fireEvent.scroll(scrollDiv, {
      target: { scrollTop: 100, clientHeight: 500, scrollHeight: 1000 }
    });
    
    expect(screen.getByText(/scroll/i)).toBeInTheDocument(); // Adjust based on button text

    fireEvent.scroll(scrollDiv, {
      target: { scrollTop: 900, clientHeight: 500, scrollHeight: 1000 }
    });

    expect(screen.queryByText(/scroll/i)).not.toBeInTheDocument();
    expect(screen.getByText(/agree/i)).toBeInTheDocument(); // Adjust based on button text
  });

  it('calls downloadPDF on button click', async () => {
    // Mock the fetch API to simulate PDF download
    global.fetch = jest.fn().mockResolvedValue({
      blob: jest.fn().mockResolvedValue(new Blob(['PDF content'], { type: 'application/pdf' }))
    });

    render(<Model name="info_tooltips" data={{ target: { title: 'test.pdf' } }} closepdf={mockClosePdf} agreePDF={mockAgreePDF} />);
    
    fireEvent.click(screen.getByText(/download pdf/i)); // Adjust button text to match

    expect(fetch).toHaveBeenCalled();
    expect(screen.queryByText(/scroll/i)).not.toBeInTheDocument(); // Verify the PDF is being "downloaded"
  });
});
