import React from 'react';
import { render } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk'; // Assume we're using redux-thunk for async actions
import { dispatchLoader, dispatchError, getLovData } from './yourActionFile'; // Adjust path accordingly
import axios from 'axios';
import moxios from 'moxios'; // For mocking axios requests

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe('Redux Actions', () => {
  let store;

  beforeEach(() => {
    store = mockStore({});
    moxios.install(); // Install moxios for each test
  });

  afterEach(() => {
    moxios.uninstall(); // Uninstall moxios after each test
    jest.clearAllMocks(); // Clear all mocks
  });

  it('dispatches dispatchLoader action', () => {
    const expectedActions = [
      { type: 'loader/getState', payload: { isFetching: true } }
    ];
    store.dispatch(dispatchLoader(true));
    expect(store.getActions()).toEqual(expectedActions);
  });

  it('dispatches dispatchError action with response error', async () => {
    const mockError = {
      response: {
        status: 404,
        statusText: 'Not Found',
      },
    };

    store.dispatch(dispatchError(mockError));
    
    const expectedActions = [
      { type: 'loader/getState', payload: { isFetching: false } },
      {
        type: 'error/getError',
        payload: {
          statusCode: 404,
          statusText: 'Not Found',
        },
      },
    ];

    expect(store.getActions()).toEqual(expectedActions);
  });

  it('successfully fetches lov data', async () => {
    const testField = 'testField';
    const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_LOVREF}${testField}`;
    moxios.stubRequest(url, {
      status: 200,
      response: [{ CODE_DESC: 'Test Desc', CODE_VALUE: 'Test Value' }]
    });

    await store.dispatch(getLovData(testField));

    const expectedActions = [
      { 
        type: 'loader/getState', 
        payload: { isFetching: true } 
      },
      { 
        type: 'lov/getLovData', 
        payload: { label: testField, value: [{ CODE_DESC: 'Test Desc', CODE_VALUE: 'Test Value' }] } 
      },
      { 
        type: 'loader/getState', 
        payload: { isFetching: false } 
      }
    ];

    expect(store.getActions()).toEqual(expectedActions);
  });
});
