import generatePayload from './path-to-your-service-file'; // Update with the actual path
import { CONSTANTS } from "../utils/common/constants";
import * as changeUtils from "../utils/common/change.utils"; // Import the utility to mock
import { sortByAscendingOrder } from "./common-service";

// Mocking functions
jest.mock("../utils/common/change.utils", () => ({
  getUrl: {
    getChannelRefNo: jest.fn(),
  }
}));

jest.mock("./common-service", () => ({
  sortByAscendingOrder: jest.fn((payload) => payload) // Just return the payload for simplicity
}));

describe('service createPayload', () => {
  beforeEach(() => {
    jest.clearAllMocks(); // Clear mocks before each test
  });

  it('should create payload correctly for stageId "ad-1"', () => {
    changeUtils.getUrl.getChannelRefNo.mockReturnValue({
      channelRefNo: 'testChannelRef',
      applicationRefNo: 'testAppRef'
    });

    const data = { stageId: "ad-1" };
    const currentStageFields = { name: 'John Doe', mobile_number_rwb: '123456789' };
    const url = "http://test.com/preserve";
    const stageSelectorApplicants = { name: '', mobile_number_rwb: '987654321' };
    const resume = undefined;

    const expectedPayload = {
      application: {
        channel_reference: 'testChannelRef',
        application_reference: 'testAppRef',
        stage: { stage_id: "AD", page_id: "ad-1" }
      },
      applicants: [{
        name: 'John Doe',
        mobile_number_rwb: '123456789'
      }]
    };

    const result = generatePayload.createPayload(data, currentStageFields, url, stageSelectorApplicants, resume);

    expect(result).toEqual(expectedPayload);
  });

  it('should delete mobile_number_rwb for stageId "bd_3"', () => {
    changeUtils.getUrl.getChannelRefNo.mockReturnValue({
      channelRefNo: 'testChannelRef',
      applicationRefNo: 'testAppRef'
    });

    const data = { stageId: CONSTANTS.STAGE_NAMES.BD_3 };
    const currentStageFields = { name: 'Jane Doe', mobile_number_rwb: '123456789' };
    const url = "http://test.com/preserve";
    const stageSelectorApplicants = {};
    const resume = undefined;

    const expectedPayload = {
      application: {
        channel_reference: 'testChannelRef',
        application_reference: 'testAppRef',
      },
      applicants: [{
        name: 'Jane Doe'
      }]
    };

    const result = generatePayload.createPayload(data, currentStageFields, url, stageSelectorApplicants, resume);

    expect(result).toEqual(expectedPayload);
  });

  it('should add is_save_to_pega when resume is "RESUME"', () => {
    changeUtils.getUrl.getChannelRefNo.mockReturnValue({
      channelRefNo: 'testChannelRef',
      applicationRefNo: 'testAppRef'
    });

    const data = { stageId: "rp" };
    const currentStageFields = { name: 'John Smith' };
    const url = "http://test.com/preserve";
    const stageSelectorApplicants = {};
    const resume = 'RESUME';

    const expectedPayload = {
      application: {
        channel_reference: 'testChannelRef',
        application_reference: 'testAppRef',
        is_save_to_pega: 'YES',
        stage: {
          stage_id: "FFD", 
          page_id: "rp"
        }
      },
      applicants: [{
        name: 'John Smith'
      }]
    };

    const result = generatePayload.createPayload(data, currentStageFields, url, stageSelectorApplicants, resume);

    expect(result).toEqual(expectedPayload);
  });

  // Add more test cases as needed
});
