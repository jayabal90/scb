// actions.test.ts
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import axios from 'axios';
import { getLovData } from './path-to-your-actions'; // Adjust import based on your file structure
import { lovAction } from '../utils/store/lov-slice';
import { dispatchError } from '../your-error-dispatch-function'; // Adjust based on your file structure

jest.mock('axios');
const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

describe('getLovData action', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({});
    jest.clearAllMocks();
  });

  it('dispatches LOV data on successful fetch', async () => {
    const mockResponse = {
      data: [
        { CODE_DESC: "Option 1", CODE_VALUE: "1" },
        { CODE_DESC: "Option 2", CODE_VALUE: "2" },
      ],
    };

    (axios.get as jest.Mock).mockResolvedValueOnce(mockResponse);

    await store.dispatch(getLovData('testField'));

    const actions = store.getActions();

    expect(actions[0]).toEqual(lovAction.getLovData({
      label: 'testField',
      value: mockResponse.data,
    }));
  });

  it('dispatches error action on network failure', async () => {
    const mockError = {
      response: {
        status: 404,
        statusText: 'Not Found',
      },
    };

    (axios.get as jest.Mock).mockRejectedValueOnce(mockError);

    await store.dispatch(getLovData('testField'));

    const actions = store.getActions();
    expect(actions).toContainEqual(dispatchError(mockError));
  });
});
