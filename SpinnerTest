import PreApprovalUtil from './PreApprovalUtil'; // Adjust the import according to your directory structure
import { store } from '../../../utils/store/store'; // Adjust if necessary
import { v4 as uuid } from 'uuid';

jest.mock('uuid', () => ({
  v4: jest.fn(() => '123-456'), // Mocked UUID
}));

describe('PreApprovalUtil', () => {
  beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();
    
    // Mocking the store state
    store.getState = jest.fn(() => ({
      stages: {
        stages: [{
          stageInfo: {
            applicants: [{ /* Mock applicant data */ }],
            application: {},
            lov_desc: {},
          },
          stageId: 'AD_1',
        }]
      },
      lovDesc: {
        lovDesc: [
          { label: 'res_city', code_desc: 'Hong Kong' },
          { label: 'off_city', code_desc: 'Kowloon' },
        ],
      },
      auth: {
        sessionUid: 'session-id',
      }
    }));
  });

  test('generateUUID should return a unique identifier', () => {
    const uuid = PreApprovalUtil.generateUUID();
    expect(uuid).toBe('123-456');
  });

  test('getApplicantFields should return correct fields', () => {
    const fields = PreApprovalUtil.getApplicantFields();
    expect(fields.length).toBeGreaterThan(0); // Adjust based on what you expect
  });

  test('getSHA256Hash should return a SHA256 hash', async () => {
    const input = 'test-input';
    const hash = await PreApprovalUtil.getSHA256Hash(input);
    expect(hash).toBeDefined(); // Replace with expected hash if known
  });

  test('getAckMetaData should return metadata object', () => {
    const channelReference = 'channel-123';
    const result = JSON.parse(PreApprovalUtil.getAckMetaData(channelReference));
    
    expect(result).toHaveProperty('reqId', '123-456'); // Mocked UUID
    expect(result).toHaveProperty('Channel', 'MOBILE');
    // Add more assertions based on expected structure
  });

  test('getFormConfigPayload should return a correctly structured payload', () => {
    const payload = PreApprovalUtil.getFormConfigPayload();

    expect(payload).toHaveProperty('applicants');
    expect(payload.applicants).toHaveProperty('bauth_key');
    // Add assertions for each expected property and structure
    expect(payload.stage).toHaveProperty('stage_status', 'incomplete');
  });

  test('getLAuth should return a value representing the LAuth auth', async () => {
    const result = await PreApprovalUtil.getLAuth();
    expect(result).toBeDefined(); // Replace with expected result if known
  });
  
  // You can add more tests for other methods
});
