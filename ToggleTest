import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import Toggel from "./Toggel";

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock("react", () => {
  const actualReact = jest.requireActual("react");
  return {
    ...actualReact,
    useState: jest.fn(),
  };
});

describe("Toggel Component", () => {
  let mockDispatch, mockSetState;

  beforeEach(() => {
    mockDispatch = jest.fn();
    mockSetState = jest.fn();
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation((callback) => {
      return callback({
        stages: {
          stages: [
            {
              stageInfo: {
                applicants: [
                  { marketing_email: "Y", marketing_phone_others: "N" },
                ],
              },
            },
          ],
          userInput: {
            applicants: [{ marketing_email: "N", marketing_phone_others: "Y" }],
          },
        },
      });
    });
    jest.spyOn(React, "useState").mockImplementation((initialValue) => [
      initialValue,
      mockSetState,
    ]);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const props = {
    data: {
      logical_field_name: "marketing_email",
      rwb_label_name: "Marketing Email",
      min_length: 0,
      length: 255,
      regex: "",
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
  };

  it("should render the component with default props", () => {
    render(<Toggel {...props} />);
    expect(screen.getByText("Marketing Email")).toBeInTheDocument();
    const checkbox = screen.getByRole("checkbox", { name: "marketing_email" });
    expect(checkbox).toBeInTheDocument();
    expect(checkbox).not.toBeChecked(); // Initially false
  });

  it("should update the state and call callbacks on toggle change", () => {
    render(<Toggel {...props} />);
    const checkbox = screen.getByRole("checkbox", { name: "marketing_email" });

    // Simulate toggle to checked
    fireEvent.click(checkbox);
    expect(mockSetState).toHaveBeenCalledWith(true); // Update state
    expect(props.handleCallback).toHaveBeenCalledWith(props.data, "Y"); // Callback with YES
    expect(mockDispatch).toHaveBeenCalled(); // Dispatch called

    // Simulate toggle to unchecked
    fireEvent.click(checkbox);
    expect(mockSetState).toHaveBeenCalledWith(false); // Update state
    expect(props.handleCallback).toHaveBeenCalledWith(props.data, "N"); // Callback with NO
  });

  it("should disable the related toggle based on conditions", () => {
    const updatedProps = {
      ...props,
      data: { ...props.data, logical_field_name: "marketing_phone_others" },
    };

    render(<Toggel {...updatedProps} />);
    const checkbox = screen.getByRole("checkbox", { name: "marketing_phone_others" });

    const relatedField = document.createElement("input");
    relatedField.setAttribute("name", "marketing_phone_all");
    relatedField.setAttribute("type", "checkbox");
    document.body.appendChild(relatedField);

    fireEvent.click(checkbox); // Enable current toggle
    expect(relatedField.disabled).toBe(true);

    fireEvent.click(checkbox); // Disable current toggle
    expect(relatedField.disabled).toBe(false);
  });

  it("should display error message if error state is set", () => {
    jest.spyOn(React, "useState").mockImplementationOnce(() => ["Error", mockSetState]);
    render(<Toggel {...props} />);
    expect(screen.getByText("Error")).toBeInTheDocument();
  });
});
