import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import Toggel from "./Toggel";

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

describe("Toggel Component", () => {
  let mockDispatch;

  beforeEach(() => {
    mockDispatch = jest.fn();
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation((selector) =>
      selector({
        stages: {
          stages: [
            {
              stageInfo: {
                applicants: [
                  {
                    marketing_email: "Y",
                    marketing_phone_others: "N",
                    marketing_phone_all: "Y",
                  },
                ],
              },
            },
          ],
          userInput: {
            applicants: [
              {
                marketing_email: "N",
                marketing_phone_others: "Y",
                marketing_phone_all: "N",
              },
            ],
          },
        },
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const props = {
    data: {
      logical_field_name: "marketing_email",
      rwb_label_name: "Marketing Email",
      min_length: 0,
      length: 255,
      regex: "",
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
  };

  it("should render the component with initial state", () => {
    render(<Toggel {...props} />);
    const label = screen.getByText("Marketing Email");
    const checkbox = screen.getByRole("checkbox", { name: "marketing_email" });

    expect(label).toBeInTheDocument();
    expect(checkbox).toBeInTheDocument();
    expect(checkbox).not.toBeChecked(); // Default state from mock userInput
  });

  it("should call handleCallback and dispatch on toggle change to checked", () => {
    render(<Toggel {...props} />);
    const checkbox = screen.getByRole("checkbox", { name: "marketing_email" });

    // Simulate toggle to checked
    fireEvent.click(checkbox);

    expect(checkbox).toBeChecked();
    expect(props.handleCallback).toHaveBeenCalledWith(props.data, "Y");
    expect(props.handleFieldDispatch).toHaveBeenCalledWith("marketing_email", "Y");
    expect(mockDispatch).toHaveBeenCalled();
  });

  it("should call handleCallback and dispatch on toggle change to unchecked", () => {
    render(<Toggel {...props} />);
    const checkbox = screen.getByRole("checkbox", { name: "marketing_email" });

    // Simulate toggle to unchecked
    fireEvent.click(checkbox); // Checked
    fireEvent.click(checkbox); // Unchecked

    expect(checkbox).not.toBeChecked();
    expect(props.handleCallback).toHaveBeenCalledWith(props.data, "N");
    expect(props.handleFieldDispatch).toHaveBeenCalledWith("marketing_email", "N");
    expect(mockDispatch).toHaveBeenCalled();
  });

  it("should disable related toggle buttons based on conditions", () => {
    const updatedProps = {
      ...props,
      data: { ...props.data, logical_field_name: "marketing_phone_others" },
    };

    render(<Toggel {...updatedProps} />);
    const checkbox = screen.getByRole("checkbox", { name: "marketing_phone_others" });

    const relatedCheckbox = document.createElement("input");
    relatedCheckbox.setAttribute("name", "marketing_phone_all");
    relatedCheckbox.setAttribute("type", "checkbox");
    document.body.appendChild(relatedCheckbox);

    // Simulate enabling `marketing_phone_others`
    fireEvent.click(checkbox);

    expect(checkbox).toBeChecked();
    expect(relatedCheckbox.disabled).toBe(true);

    // Simulate disabling `marketing_phone_others`
    fireEvent.click(checkbox);

    expect(checkbox).not.toBeChecked();
    expect(relatedCheckbox.disabled).toBe(false);
  });

  it("should display an error message if error state is set", () => {
    const setStateMock = jest.fn();
    jest.spyOn(React, "useState").mockImplementation((init) => {
      if (init === "") return ["Error Message", setStateMock];
      return [init, setStateMock];
    });

    render(<Toggel {...props} />);
    expect(screen.getByText("Error Message")).toBeInTheDocument();
  });
});
