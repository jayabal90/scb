import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import MultiSelectionBox from "./MultiSelectionBox";

// Mock react-redux hooks
jest.mock("react-redux", () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

describe("MultiSelectionBox Component", () => {
  let mockDispatch;

  beforeEach(() => {
    // Reset mocks
    mockDispatch = jest.fn();
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation((selector) =>
      selector({
        lov: {
          lov: [
            {
              label: "testField",
              value: [
                { CODE_VALUE: "1", CODE_DESC: "Option 1" },
                { CODE_VALUE: "2", CODE_DESC: "Option 2" },
              ],
            },
          ],
        },
        fielderror: { error: false },
        stages: { userInput: { applicants: [{ testField: "" }] } },
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("renders the MultiSelectionBox with a label and placeholder", () => {
    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Label",
          max_selects: "2",
          mandatory: "Yes",
        }}
        handleCallback={jest.fn()}
      />
    );

    expect(screen.getByLabelText("Test Label")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Test Label")).toBeInTheDocument();
  });

  it("displays options when dropdown is clicked", () => {
    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Label",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByLabelText("Test Label"));
    expect(screen.getByText("Option 1")).toBeInTheDocument();
    expect(screen.getByText("Option 2")).toBeInTheDocument();
  });

  it("allows selecting multiple options", () => {
    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Label",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByLabelText("Test Label"));

    const option1 = screen.getByLabelText("Option 1");
    const option2 = screen.getByLabelText("Option 2");

    fireEvent.click(option1);
    fireEvent.click(option2);

    expect(option1).toBeChecked();
    expect(option2).toBeChecked();
    expect(screen.getByText("Option 1")).toBeInTheDocument();
    expect(screen.getByText("Option 2")).toBeInTheDocument();
  });

  it("prevents selecting more than max_selects options", () => {
    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Label",
          max_selects: "1",
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByLabelText("Test Label"));

    const option1 = screen.getByLabelText("Option 1");
    const option2 = screen.getByLabelText("Option 2");

    fireEvent.click(option1);
    fireEvent.click(option2);

    expect(option1).toBeChecked();
    expect(option2).not.toBeChecked();
  });

  it("calls dispatch with the correct actions on option select", () => {
    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Label",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByLabelText("Test Label"));
    const option1 = screen.getByLabelText("Option 1");
    fireEvent.click(option1);

    expect(mockDispatch).toHaveBeenCalledWith({
      type: "lovDesc/addLovData",
      payload: {
        fieldData: {
          fieldName: "testField",
          code_desc: "Option 1",
          code_value: "1",
        },
      },
    });
  });

  it("shows an error message when mandatory field is empty", () => {
    useSelector.mockImplementation((selector) =>
      selector({
        lov: {
          lov: [
            {
              label: "testField",
              value: [
                { CODE_VALUE: "1", CODE_DESC: "Option 1" },
                { CODE_VALUE: "2", CODE_DESC: "Option 2" },
              ],
            },
          ],
        },
        fielderror: { error: true },
        stages: { userInput: { applicants: [{ testField: "" }] } },
      })
    );

    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Label",
          mandatory: "Yes",
        }}
        handleCallback={jest.fn()}
      />
    );

    expect(screen.getByText("Please select a valid Test Label")).toBeInTheDocument();
  });
});
