import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import MultiSelectionBox from './MultiSelectionBox';
import { ValueUpdateAction } from '../../../utils/store/value-update-slice';
import { lovDescAction } from '../../../utils/store/lov-desc-slice';

const mockStore = configureStore([]);

describe('MultiSelectionBox Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      lov: {
        lov: [
          {
            label: 'testField',
            value: [
              { CODE_VALUE: '1', CODE_DESC: 'Option 1', checked: false },
              { CODE_VALUE: '2', CODE_DESC: 'Option 2', checked: false },
              { CODE_VALUE: '3', CODE_DESC: 'Option 3', checked: false },
            ],
          },
        ],
      },
      fielderror: {
        error: false,
      },
      stages: {
        stages: [],
        userInput: {
          applicants: [
            {
              testField: '1',
            },
          ],
        },
      },
    });

    store.dispatch = jest.fn();
  });

  const renderWithStore = (component: React.ReactElement) => {
    return render(<Provider store={store}>{component}</Provider>);
  };

  it('renders the MultiSelectionBox component', () => {
    renderWithStore(
      <MultiSelectionBox
        data={{
          logical_field_name: 'testField',
          rwb_label_name: 'Test Field',
          max_selects: '2',
        }}
        handleCallback={jest.fn()}
      />
    );

    expect(screen.getByLabelText(/Test Field/i)).toBeInTheDocument();
  });

  it('shows options when dropdown is clicked', () => {
    renderWithStore(
      <MultiSelectionBox
        data={{
          logical_field_name: 'testField',
          rwb_label_name: 'Test Field',
          max_selects: '2',
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByLabelText(/Test Field/i));
    expect(screen.getByText(/Option 1/i)).toBeInTheDocument();
    expect(screen.getByText(/Option 2/i)).toBeInTheDocument();
    expect(screen.getByText(/Option 3/i)).toBeInTheDocument();
  });

  it('allows selecting options and dispatches actions', () => {
    renderWithStore(
      <MultiSelectionBox
        data={{
          logical_field_name: 'testField',
          rwb_label_name: 'Test Field',
          max_selects: '2',
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByLabelText(/Test Field/i));
    const option1Checkbox = screen.getByLabelText(/Option 1/i);

    fireEvent.click(option1Checkbox);
    expect(store.dispatch).toHaveBeenCalledWith(
      lovDescAction.addLovData({
        fieldData: {
          fieldName: 'testField',
          code_desc: 'Option 1',
          code_value: '1',
        },
      })
    );

    fireEvent.click(option1Checkbox);
    expect(store.dispatch).toHaveBeenCalledWith(
      ValueUpdateAction.getChangeUpdate({
        id: undefined, // Replace with the actual stageId if applicable
        changes: true,
      })
    );
  });

  it('disables selection when max selects are reached', () => {
    renderWithStore(
      <MultiSelectionBox
        data={{
          logical_field_name: 'testField',
          rwb_label_name: 'Test Field',
          max_selects: '1',
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByLabelText(/Test Field/i));
    const option1Checkbox = screen.getByLabelText(/Option 1/i);
    const option2Checkbox = screen.getByLabelText(/Option 2/i);

    fireEvent.click(option1Checkbox);
    expect(option1Checkbox).toBeChecked();
    expect(option2Checkbox).toBeDisabled();
  });

  it('renders error message when validation fails', () => {
    store = mockStore({
      ...store.getState(),
      fielderror: { error: true },
    });

    renderWithStore(
      <MultiSelectionBox
        data={{
          logical_field_name: 'testField',
          rwb_label_name: 'Test Field',
          max_selects: '2',
        }}
        handleCallback={jest.fn()}
      />
    );

    expect(screen.getByText(/Test Field/i)).toBeInTheDocument();
    expect(screen.getByText(/Error message/i)).toBeInTheDocument(); // Replace with actual error message text
  });
});
