import React from "react";
import { render, fireEvent, screen } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import MultiSelectionBox from "./multi-selection-box";

const mockStore = configureStore([]);
const mockProps = {
  data: {
    max_selects: "3",
    logical_field_name: "testField",
    rwb_label_name: "Test Label",
    mandatory: "Yes",
    ui_defaulted_value: "",
  },
  handleCallback: jest.fn(),
};

describe("MultiSelectionBox Component", () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      lov: {
        lov: [
          {
            label: "testField",
            value: [
              { CODE_VALUE: "1", CODE_DESC: "Option 1" },
              { CODE_VALUE: "2", CODE_DESC: "Option 2" },
              { CODE_VALUE: "3", CODE_DESC: "Option 3" },
            ],
          },
        ],
      },
      fielderror: { error: {} },
      stages: { stages: [], userInput: { applicants: [{}] } },
    });
  });

  it("should render the component", () => {
    render(
      <Provider store={store}>
        <MultiSelectionBox {...mockProps} />
      </Provider>
    );

    expect(screen.getByText(/Test Label/)).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/Test Label/)).toBeInTheDocument();
  });

  it("should open the dropdown and display options when clicked", () => {
    render(
      <Provider store={store}>
        <MultiSelectionBox {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByPlaceholderText(/Test Label/));
    expect(screen.getByText(/Option 1/)).toBeInTheDocument();
    expect(screen.getByText(/Option 2/)).toBeInTheDocument();
    expect(screen.getByText(/Option 3/)).toBeInTheDocument();
  });

  it("should select an option and update the selected values", () => {
    render(
      <Provider store={store}>
        <MultiSelectionBox {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByPlaceholderText(/Test Label/));
    fireEvent.click(screen.getByLabelText(/Option 1/));

    expect(screen.getByText(/Option 1/)).toBeInTheDocument();
  });

  it("should not allow selecting more than the maximum allowed options", () => {
    render(
      <Provider store={store}>
        <MultiSelectionBox {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByPlaceholderText(/Test Label/));
    fireEvent.click(screen.getByLabelText(/Option 1/));
    fireEvent.click(screen.getByLabelText(/Option 2/));
    fireEvent.click(screen.getByLabelText(/Option 3/));

    // Try selecting a fourth option, which should be disabled
    const fourthOptionCheckbox = screen.getByLabelText(/Option 3/);
    expect(fourthOptionCheckbox.disabled).toBe(true);
  });

  it("should remove a selected option", () => {
    render(
      <Provider store={store}>
        <MultiSelectionBox {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByPlaceholderText(/Test Label/));
    fireEvent.click(screen.getByLabelText(/Option 1/));
    fireEvent.click(screen.getByText(/Option 1/).querySelector(".multi-close"));

    expect(screen.queryByText(/Option 1/)).not.toBeInTheDocument();
  });

  it("should display an error if no selection is made and the field is mandatory", () => {
    render(
      <Provider store={store}>
        <MultiSelectionBox {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByPlaceholderText(/Test Label/));
    fireEvent.click(screen.getByText(/Continue/));

    expect(screen.getByText(/Test Label is required/)).toBeInTheDocument();
  });
});
