import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import MultiSelectionBox from "./multi-selection-box"; // Update with the correct path
import * as redux from "react-redux";

jest.mock("react-redux", () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock("react", () => {
  const originalReact = jest.requireActual("react");
  return {
    ...originalReact,
    useState: jest.fn(),
    useEffect: jest.fn(),
  };
});

describe("MultiSelectionBox Component", () => {
  const mockDispatch = jest.fn();
  const mockUseState = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (redux.useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    mockUseState.mockImplementation((initialValue) => [initialValue, jest.fn()]);
    jest.spyOn(React, "useState").mockImplementation(mockUseState);
  });

  test("renders MultiSelectionBox with the provided props", () => {
    (redux.useSelector as jest.Mock).mockImplementation((selector) =>
      selector({
        lov: {
          lov: [
            {
              label: "testField",
              value: [
                { CODE_VALUE: "val1", CODE_DESC: "Value 1" },
                { CODE_VALUE: "val2", CODE_DESC: "Value 2" },
              ],
            },
          ],
        },
        fielderror: { error: false },
        stages: {
          userInput: { applicants: [{}] },
        },
      })
    );

    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Field",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    expect(screen.getByText("Test Field")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Test Field")).toBeInTheDocument();
  });

  test("opens dropdown on click", () => {
    (redux.useSelector as jest.Mock).mockImplementation(() => ({
      lov: [],
      fielderror: { error: false },
      stages: {
        userInput: { applicants: [{}] },
      },
    }));

    const mockSetState = jest.fn();
    mockUseState.mockImplementation((initialValue) =>
      initialValue === false ? [false, mockSetState] : [[], jest.fn()]
    );

    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Field",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByPlaceholderText("Test Field"));
    expect(mockSetState).toHaveBeenCalledWith(true);
  });

  test("displays error message when required field is empty", () => {
    (redux.useSelector as jest.Mock).mockImplementation((selector) =>
      selector({
        fielderror: { error: true },
      })
    );

    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Field",
          mandatory: "Yes",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    expect(screen.getByText(/Test Field/)).toBeInTheDocument();
    expect(screen.getByText(/Test Field is required/)).toBeInTheDocument();
  });

  test("selects an option and updates state", () => {
    (redux.useSelector as jest.Mock).mockImplementation((selector) =>
      selector({
        lov: {
          lov: [
            {
              label: "testField",
              value: [
                { CODE_VALUE: "val1", CODE_DESC: "Value 1" },
                { CODE_VALUE: "val2", CODE_DESC: "Value 2" },
              ],
            },
          ],
        },
        fielderror: { error: false },
        stages: {
          userInput: { applicants: [{}] },
        },
      })
    );

    const mockSetState = jest.fn();
    mockUseState.mockImplementation((initialValue) =>
      initialValue === [] ? [[], mockSetState] : [false, jest.fn()]
    );

    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Field",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByPlaceholderText("Test Field"));
    fireEvent.click(screen.getByLabelText("Value 1"));
    expect(mockSetState).toHaveBeenCalled();
  });

  test("does not allow selecting more than the max_selects value", () => {
    (redux.useSelector as jest.Mock).mockImplementation((selector) =>
      selector({
        lov: {
          lov: [
            {
              label: "testField",
              value: [
                { CODE_VALUE: "val1", CODE_DESC: "Value 1" },
                { CODE_VALUE: "val2", CODE_DESC: "Value 2" },
                { CODE_VALUE: "val3", CODE_DESC: "Value 3" },
              ],
            },
          ],
        },
        fielderror: { error: false },
        stages: {
          userInput: { applicants: [{}] },
        },
      })
    );

    render(
      <MultiSelectionBox
        data={{
          logical_field_name: "testField",
          rwb_label_name: "Test Field",
          max_selects: "2",
        }}
        handleCallback={jest.fn()}
      />
    );

    fireEvent.click(screen.getByPlaceholderText("Test Field"));
    fireEvent.click(screen.getByLabelText("Value 1"));
    fireEvent.click(screen.getByLabelText("Value 2"));
    fireEvent.click(screen.getByLabelText("Value 3")); // Should not allow this
    expect(screen.getAllByRole("checkbox", { checked: true }).length).toBe(2);
  });
});
