import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import Text from './Text'; // Adjust the import path as necessary
import rootReducer from '../../../utils/store'; // Adjust the import path as necessary

// Create a mock store for testing purposes
const createMockStore = (initialState) => {
  return createStore(rootReducer, initialState);
};

// Create a utility function to render component with store provider
const renderWithStore = (component, store) => {
  return render(
    <Provider store={store}>{component}</Provider>
  );
};

describe('Text Component', () => {
  let store;

  beforeEach(() => {
    store = createMockStore({
      // Initial mock state needed for your tests
      stages: {
        stages: [
          {
            stageId: 'ad-1',
            stageInfo: {
              applicants: [
                {
                  related_party: 'Y',
                  // Other applicant data...
                }
              ]
            }
          }
        ],
        userInput: {
          applicants: [
            {
              related_party: 'Y',
              // Other user input fields...
            }
          ]
        },
        pinyinToggle: false,
      },
      fielderror: {
        error: {}
      },
      // Add other necessary slices of state...
    });
  });

  test('renders Text component and shows placeholder', () => {
    const props = {
      data: {
        logical_field_name: 'test_field',
        rwb_label_name: 'Test Field',
        ui_defaulted_value: '',
        type: 'text',
        mandatory: 'Yes',
        length: 100,
        // Add other necessary props...
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };

    renderWithStore(<Text {...props} />, store);

    const inputElement = screen.getByLabelText('test_field');
    expect(inputElement).toBeInTheDocument();
    expect(inputElement).toHaveAttribute('placeholder', ''); // Update according to your logic for placeholder
  });

  test('shows error message on empty mandatory field', () => {
    const props = {
      data: {
        logical_field_name: 'test_field',
        rwb_label_name: 'Test Field',
        ui_defaulted_value: '',
        type: 'text',
        mandatory: 'Yes',
        length: 100,
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };

    renderWithStore(<Text {...props} />, store);

    const inputElement = screen.getByLabelText('test_field');
    fireEvent.blur(inputElement); // Trigger the blur event to validate input

    expect(screen.getByText(/required/i)).toBeInTheDocument(); // Replace with your actual error message
  });

  test('dispatches action on input change', () => {
    const props = {
      data: {
        logical_field_name: 'test_field',
        rwb_label_name: 'Test Field',
        ui_defaulted_value: '',
        type: 'text',
        mandatory: 'Yes',
        length: 100,
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };

    renderWithStore(<Text {...props} />, store);

    const inputElement = screen.getByLabelText('test_field');
    fireEvent.change(inputElement, { target: { value: 'New Value' } });

    expect(screen.getByDisplayValue('New Value')).toBeInTheDocument();
  });

  // Add more test cases...

});
