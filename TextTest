// Text.test.tsx
import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Text from './Text'; // Adjust the import based on your folder structure
import * as redux from 'react-redux';

const mockStore = configureStore([]);

describe('Text Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: 'ad-1' }],
        userInput: {
          applicants: [
            {
              related_party: 'Y', // Example value
              // other applicant properties as needed
            },
          ],
        },
        pinyinToggle: false, // Adjust if needed
      },
      fielderror: { error: {} },
      // Add other slices here if required
    });

    jest.spyOn(redux, 'useDispatch').mockReturnValue(jest.fn()); // Mock useDispatch
    jest.spyOn(redux, 'useSelector').mockImplementation((selector) => {
      return selector(store.getState());
    });
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  it('renders without crashing', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <Text data={{
          logical_field_name: 'first_name',
          rwb_label_name: 'First Name',
          type: 'text',
          mandatory: 'Yes',
          ui_defaulted_value: ''
        }} handleCallback={jest.fn()} handleFieldDispatch={jest.fn()} />
      </Provider>
    );

    expect(getByLabelText('first_name')).toBeInTheDocument();
  });

  it('shows an error message when the input is empty and is mandatory', () => {
    const { getByLabelText, getByTitle } = render(
      <Provider store={store}>
        <Text data={{
          logical_field_name: 'first_name',
          rwb_label_name: 'First Name',
          type: 'text',
          mandatory: 'Yes',
          ui_defaulted_value: ''
        }} handleCallback={jest.fn()} handleFieldDispatch={jest.fn()} />
      </Provider>
    );

    const input = getByLabelText('first_name');
    fireEvent.blur(input); // Simulate the blur event to trigger validation

    expect(getByTitle('error-msg')).toHaveTextContent('First Name is required'); // Adjust based on your error handling logic
  });

  it('updates the input value correctly', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <Text data={{
          logical_field_name: 'first_name',
          rwb_label_name: 'First Name',
          type: 'text',
          ui_defaulted_value: ''
        }} handleCallback={jest.fn()} handleFieldDispatch={jest.fn()} />
      </Provider>
    );

    const input = getByLabelText('first_name');
    fireEvent.change(input, { target: { value: 'John' } });

    expect(input.value).toBe('John');
  });

  // Additional tests for other error cases, validation and input types can be added here

});
