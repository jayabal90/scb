// getFields.test.ts
import React from 'react';
import { render } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { getFields } from './path/to/getFields'; // Adjust the import to your actual path.
import { CONSTANTS } from '../../../utils/common/constants';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe('getFields action creator', () => {
    let store;

    beforeEach(() => {
        store = mockStore({
            // initial state can go here
        });
    });

    const mockStages = [
        {
            stageId: 'bd-3',
            stageInfo: {
                fieldMetaData: {
                    data: {
                        stages: [
                            {
                                fields: [
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.NATURE_OF_EMPLOYER },
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_INSTITUTION_1 },
                                    // more fields as needed...
                                ]
                            }
                        ]
                    }
                }
            }
        }
    ];

    it('should handle radioResidency updates for FINANCIAL_INSTITUTION', async () => {
        const userInputs = {
            applicants: [{
                [CONSTANTS.LOGICAL_FIELD_NAMES.NATURE_OF_EMPLOYER]: 'Some value'
            }]
        };
        
        const expectedActions = [
            // Define the expected actions dispatched
            fieldErrorAction.getMandatoryFields([CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_INSTITUTION_1]),
            stagesAction.removeAddToggleField({
                removeFields: [],
                newFields: [CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_INSTITUTION_1],
                value: ''
            }),
            stagesAction.modifyStage({
                fieldData: { 
                    fieldName: CONSTANTS.LOGICAL_FIELD_NAMES.NATURE_OF_EMPLOYER,
                    value: 'Some value', 
                }
            }),
        ];

        // Dispatch getField function
        await store.dispatch(getFields(mockStages, { 
            logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_INSTITUTION,
            value: '999' 
        }, userInputs, {}, false));

        const actions = store.getActions();
        expect(actions).toEqual(expect.arrayContaining(expectedActions));
    });

    it('should handle residency based changes', async () => {
        const userInputs = {
            applicants: [{
                [CONSTANTS.LOGICAL_FIELD_NAMES.NATURE_OF_EMPLOYER]: 'Some value'
            }]
        };
        
        const radioResidency = {
            logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.RES_COUNTRY_1,
            value: CONSTANTS.LOV_DATA.CHINESE_MAINLAND,
        };

        const expectedActions = [
            stagesAction.removeAddToggleField({
                removeFields: [
                    CONSTANTS.LOGICAL_FIELD_NAMES.STATE_RES_1, 
                    // other fields...
                ],
                newFields: [],
                value: ''
            }),
            fieldErrorAction.getMandatoryFields([/* expected fields */]),
            // Other actions...
        ];

        await store.dispatch(getFields(mockStages, radioResidency, userInputs, {}, false));

        const actions = store.getActions();
        expect(actions).toEqual(expect.arrayContaining(expectedActions));
    });

    // ... you can write more tests for different conditions and scenarios

});
