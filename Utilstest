import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import { getLovData, lovAction, dispatchError } from 'path-to-your-module';
import { CONSTANTS } from '../utils/common/constants';
import { MyinfoNoResponseModel } from "../utils/model/common-model";

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);
const mockAxios = new MockAdapter(axios); // to mock axios calls

describe('getLovData action', () => {
  let store;

  beforeEach(() => {
    store = mockStore({});
    mockAxios.reset(); // Reset axios mock state before each test
  });

  it('should create GET_LOV_DATA action when fetching lov data successfully', async () => {
    const field = 'testField';
    const resData = [{ CODE_DESC: 'testDesc', CODE_VALUE: 'testValue' }];
    const expectedActions = [
      {
        type: lovAction.getLovData.type,
        payload: {
          label: field,
          value: resData
        }
      }
    ];

    mockAxios.onGet(/.+/).reply(200, resData); // Mocking our API call

    await store.dispatch(getLovData(field));

    const actions = store.getActions();
    expect(actions).toEqual(expectedActions);
  });

  it('should dispatch error action on API call failure', async () => {
    const field = 'testField';
    const mockErrorResponse = {
      response: {
        status: 404,
        statusText: 'Not Found'
      }
    };

    mockAxios.onGet(/.+/).reply(404); // Mocking a failed API call

    await store.dispatch(getLovData(field));

    const actions = store.getActions();
    expect(actions).toContainEqual(dispatchError(mockErrorResponse));
  });
});
