import React from "react";
import { render, screen } from "@testing-library/react";
import { useSelector } from "react-redux";
import Display from "./Display"; // Adjust the import path accordingly

// Mocking the Redux hooks
jest.mock("react-redux", () => ({
  useSelector: jest.fn(),
}));

// Sample mock data
const mockState = {
  stages: {
    stages: [{ stageInfo: { applicants: [{ /* your applicant data here */ }] } }],
  },
  lovDesc: {/* your lovDesc mock data */},
};

// Test suite
describe("Display Component", () => {
  // Resetting mocks before each test
  beforeEach(() => {
    useSelector.mockImplementation((selector) => selector(mockState));
  });

  it("should render correctly when given valid props", () => {
    // Setup mock data for props
    const mockProps = {
      data: {
        logical_field_name: "annual_income_pl",
        component_type: "Amount",
        rwb_label_name: "Annual Income",
        label_length: 38,
        default_visibility: null,
      },
    };

    render(<Display {...mockProps} />);

    const labelElement = screen.getByText(/Annual Income/i);
    expect(labelElement).toBeInTheDocument();

    const valueElement = screen.getByText(/HKD \d{1,3}(,\d{3})*\.\d{2}/);
    expect(valueElement).toBeInTheDocument();
  });

  it("should not render when logical field name is on noFieldDisplay", () => {
    const mockProps = {
      data: {
        logical_field_name: "us_resident",
        component_type: "text",
      },
    };

    render(<Display {...mockProps} />);

    const displayDiv = screen.queryByText(/us_resident/i);
    expect(displayDiv).not.toBeInTheDocument();
  });

  it("should correctly handle the mailing address conditional logic", () => {
    // Update the mockState with data relevant to this test
    mockState.stages.stages[0].stageInfo.applicants[0].alt_address_same_as_res_address_2 = "N";
    mockState.stages.stages[0].stageInfo.applicants[0].res_name_of_street_3 = null; // Add more state whatever necessary

    const mockProps = {
      data: {
        logical_field_name: "mailing_address_chn",
        component_type: "text",
        rwb_label_name: "Mailing Address (CHN)",
      },
    };

    render(<Display {...mockProps} />);
    const mailDisplay = screen.getByText(/Mailing Address \(CHN\)/i);
    expect(mailDisplay).toBeInTheDocument();
  });

  // Add more test cases as necessary...
});
