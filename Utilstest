import React from 'react';
import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Display from './Display';
import { StoreModel } from '../../../utils/model/common-model';

const mockStore = configureStore([]);

const initialState = {
  stages: {
    stages: [
      {
        stageInfo: {
          applicants: [
            {
              res_name_of_street_1: null,
              res_building_estate_1: null,
              res_room_flat_1: null,
              alt_address_same_as_res_address_2: 'N',
              alt_address_same_as_res_address_3: 'N',
              marketing_email: 'Y'
            },
          ],
        },
      },
    ],
  },
  lovDesc: {},
};

const renderWithStore = (store) => (
  <Provider store={store}>
    <Display data={{ logical_field_name: "marketing_questionaires" }} />
  </Provider>
);

describe('<Display />', () => {
  let store;

  beforeEach(() => {
    store = mockStore(initialState);
  });

  test('renders marketing_questionaires field correctly', () => {
    renderWithStore(store);
    expect(screen.getByText(/Email/i)).toBeInTheDocument();
  });
  
  test('does not display field when condition not met', () => {
    store = mockStore({
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [
          {
            stageInfo: {
              applicants: [
                {
                  res_name_of_street_1: '',
                  res_building_estate_1: '',
                  res_room_flat_1: '',
                  alt_address_same_as_res_address_2: 'Y',
                  alt_address_same_as_res_address_3: 'Y'
                },
              ],
            },
          },
        ],
      },
    });
    
    renderWithStore(store);
    expect(screen.queryByText(/Email/i)).not.toBeInTheDocument(); // Adjust depending on the field.
  });

  test('displays HKID field correctly', () => {
    store = mockStore({
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [
          {
            stageInfo: {
              applicants: [
                {
                  HKID: 'A123456(7)'
                },
              ],
            },
          },
        ],
      },
    });

    renderWithStore(store);
    expect(screen.getByText(/A-123456-7/i)).toBeInTheDocument(); // Format as per getfieldValue for HKID.
  });
  
  test('displays the component for amount correctly', () => {
    store = mockStore({
      ...initialState,
      stages: {
        ...initialState.stages,
        stages: [
          {
            stageInfo: {
              applicants: [
                {
                  amount_field: '20000'
                },
              ],
            },
          },
        ],
      },
    });

    renderWithStore(store);
    expect(screen.getByText(/HKD 20,000.00/i)).toBeInTheDocument();
  });

  // Add more tests according to your requirements.

});
