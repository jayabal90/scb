import { getFields } from './path/to/your/getFields'; // Adjust the import path accordingly
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { CONSTANTS } from '../../../utils/common/constants';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe('getFields', () => {
    let store;
    let dispatch;

    beforeEach(() => {
        store = mockStore({});
        dispatch = jest.fn();
    });

    it('should dispatch removeAddToggleFieldFn correctly when residency is present', () => {
        const getStages = [{
            stageId: 'sample-stage-id',
            stageInfo: {
                fieldMetaData: {
                    data: {
                        stages: [
                            {
                                fields: [
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.INVESTMENT_EXPERIENCE },
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_INSTITUTION }
                                ]
                            }
                        ]
                    }
                },
                applicants: [{ cash_needs: 'YES', education_level: 'HIGH' }]
            }
        }];

        const radioResidency = { logical_field_name: 'id_type_cb', value: 'Exit-Entry Permit' };
        const userInputs = { applicants: [{ investment_experience: 'YES' }] };
        
        const expectedActions = [
            fieldErrorAction.removeMandatoryFields(['passport_no']),
            stagesAction.removeAddToggleField({ removeFields: ['passport_no'], newFields: ['EEP', 'expiry_date'], value: '' }),
            // Add more expected actions based on your logic
        ];

        const result = getFields(getStages, radioResidency, userInputs)(dispatch);

        expect(dispatch).toHaveBeenCalledTimes(expectedActions.length);
        expectedActions.forEach(action => expect(dispatch).toHaveBeenCalledWith(action));
    });

    // Add other test cases as needed
    it('should return null if getStages is empty', () => {
        const result = getFields([], null)(dispatch);
        expect(result).toBe(null);
    });

    it('should handle investment experience correctly', () => {
        const getStages = [/* Your mock stages data here */];
        const radioResidency = { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.INVESTMENT_EXPERIENCE, value: 'YES' };
        const userInputs = { applicants: [{ investment_experience: 'YES' }] };

        getFields(getStages, radioResidency, userInputs)(dispatch);

        // Assert on the actions that should be dispatched
    });

    // Other test cases should follow the pattern above.
});
