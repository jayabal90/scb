import { render, screen, fireEvent } from '@testing-library/react';
import Date from './Date';
import * as redux from 'react-redux';
import validateService from '../../../services/validation-service';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';

// Mock the necessary Redux hooks and components
jest.mock('react-redux');

describe('Date Component', () => {
  const initialProps = {
    data: {
      logical_field_name: 'expiry_date',
      rwb_label_name: 'Expiry Date',
      editable: false,
      mandatory: 'Yes'
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
  };

  beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();

    // Mocking the redux hooks
    redux.useSelector.mockImplementation((selector) => {
      return {
        stages: {
          stages: [{ 
            stageId: 'ad-2',
            stageInfo: {
              applicants: [{ expiry_date: '2023-05-25' }] 
            } 
          }],
          userInput: {
            applicants: [{ work_type: 'E002', id_type_cb: 'Passport' }]
          }
        },
        fielderror: {
          error: {}
        }
      }[selector.name];
    });

    redux.useDispatch.mockReturnValue(jest.fn());
  });

  test('renders date inputs correctly', () => {
    render(<Date {...initialProps} />);

    expect(screen.getByPlaceholderText('DD')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('MM')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('YYYY')).toBeInTheDocument();
  });

  test('changes DD input value correctly', () => {
    render(<Date {...initialProps} />);

    const ddInput = screen.getByPlaceholderText('DD');

    fireEvent.change(ddInput, { target: { value: '15' } });
    
    expect(ddInput.value).toBe('15');
  });

  test('shows error for invalid month', () => {
    render(<Date {...initialProps} />);

    const mmInput = screen.getByPlaceholderText('MM');
    
    fireEvent.change(mmInput, { target: { value: '13' } });
    fireEvent.blur(mmInput);

    expect(screen.getByText(/Month is not valid/i)).toBeInTheDocument();
  });

  test('shows error for invalid date', () => {
    render(<Date {...initialProps} />);

    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');

    fireEvent.change(ddInput, { target: { value: '29' } });
    fireEvent.change(mmInput, { target: { value: '02' } });
    fireEvent.change(yyyyInput, { target: { value: '2021' } });
    fireEvent.blur(ddInput); // Trigger validation
    
    expect(screen.getByText(/Date is not valid/i)).toBeInTheDocument();
  });

  test('valid input does not show error', () => {
    render(<Date {...initialProps} />);

    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');

    fireEvent.change(ddInput, { target: { value: '29' } });
    fireEvent.change(mmInput, { target: { value: '02' } });
    fireEvent.change(yyyyInput, { target: { value: '2020' } });
    fireEvent.blur(yyyyInput); // Trigger validation

    expect(screen.queryByText(/Date is not valid/i)).not.toBeInTheDocument();
  });
  
  test('calls handleCallback with the correct parameters', () => {
    render(<Date {...initialProps} />);

    const ddInput = screen.getByPlaceholderText('DD');
    const mmInput = screen.getByPlaceholderText('MM');
    const yyyyInput = screen.getByPlaceholderText('YYYY');

    fireEvent.change(ddInput, { target: { value: '15' } });
    fireEvent.change(mmInput, { target: { value: '05' } });
    fireEvent.change(yyyyInput, { target: { value: '2023' } });
    fireEvent.blur(yyyyInput); // Trigger validation

    expect(initialProps.handleCallback).toHaveBeenCalledWith(initialProps.data, '2023-05-15');
  });
});
