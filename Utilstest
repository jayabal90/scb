// PreApprovalUtil.test.ts

import PreApprovalUtil from './PreApprovalUtil';
import { v4 as uuid } from 'uuid';

// Mocking the store for testing
jest.mock("../../../utils/store/store", () => ({
  store: {
    getState: jest.fn(() => ({
      stages: {
        stages: [{
          stageInfo: {
            applicants: [{}],
            application: {},
            products: [{}],
            lov_desc: {},
          }
        }],
      },
      lovDesc: {
        lovDesc: [
          { label: "res_city", code_desc: "CityA" },
          { label: "off_city", code_desc: "CityB" }
        ],
      },
      auth: {
        sessionUid: "test-session-uid"
      }
    }))
  }
}));

describe('PreApprovalUtil', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should generate a valid UUID', () => {
    const uuidResult = PreApprovalUtil.generateUUID();
    expect(uuid.validate(uuidResult)).toBe(true);
  });

  it('should retrieve applicant fields', () => {
    const expectedFields = PreApprovalUtil.getApplicantFields();
    expect(expectedFields).toEqual(expect.any(Array));
    expect(expectedFields.length).toBeGreaterThan(0); // Expect at least one field.
  });

  it('should calculate SHA256 hash correctly', async () => {
    const input = "test input";
    const hash = await PreApprovalUtil.getSHA256Hash(input);
    expect(hash).toMatch(/^[a-f0-9]{64}$/); // SHA-256 hash length
  });

  it('should get correct authorization metadata for bAuth', async () => {
    const bAuthValue = await PreApprovalUtil.getBAuth();
    expect(bAuthValue).toMatch(/^[a-f0-9]{64}$/); // SHA-256 hash length
  });

  it('should form correct payload in getAckMetaData', () => {
    const channelReference = 'test-channel-ref';
    const metaData = PreApprovalUtil.getAckMetaData(channelReference);

    const parsedMetaData = JSON.parse(metaData);
    expect(parsedMetaData).toHaveProperty('reqId');
    expect(parsedMetaData).toHaveProperty('Channel', "MOBILE");
    expect(parsedMetaData).toHaveProperty('loginType', "PRE");
    expect(parsedMetaData).toHaveProperty('sessionUID', "test-session-uid");
  });

  it('should retrieve Lov Description Fields', () => {
    const lovDescriptionFields = PreApprovalUtil.getLovDescriptionFields();
    expect(lovDescriptionFields).toContain("res_city_a_1_desc");
    expect(lovDescriptionFields).toContain("off_city_a_1_desc");
  });
});
