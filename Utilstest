import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import AuthorizeComponent from './AuthorizeComponent'; // Update the import path according to your project
import { CONSTANTS } from '../../../utils/common/constants'; // Ensure the path is correct

const mockStore = configureStore([]);

describe('AuthorizeComponent', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: CONSTANTS.STAGE_NAMES.AD_2, stageInfo: { applicants: [{}] } }],
      },
      checkboxSlice: {
        selectedvalue: JSON.stringify([{ label: 'marketing_post', checked: false }]), // Initial selected values
      },
      fielderror: {
        error: false,
      },
    });
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: "test_checkbox", rwb_label_name: "Test Checkbox", info_tooltips: "" }} handleCallback={jest.fn()} updateCheckboxStatus={jest.fn()} />
      </Provider>
    );
    expect(screen.getByText("Test Checkbox")).toBeInTheDocument();
  });

  test('checkbox state is initialized correctly', () => {
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: "test_checkbox", rwb_label_name: "Test Checkbox" }} handleCallback={jest.fn()} updateCheckboxStatus={jest.fn()} />
      </Provider>
    );
    expect(screen.getByLabelText("Test Checkbox")).not.toBeChecked(); // Initially unchecked
  });

  test('checkbox value updates on change', () => {
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: "test_checkbox", rwb_label_name: "Test Checkbox" }} handleCallback={jest.fn()} updateCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const checkbox = screen.getByLabelText("Test Checkbox");
    fireEvent.click(checkbox);
    
    expect(checkbox).toBeChecked(); // Should be checked after click
  });

  test('shows popup when all marketing checkboxes are unchecked', () => {
    // Setup stage that causes all marketing values to be 'N'
    store = mockStore({
      stages: {
        stages: [{ stageId: CONSTANTS.STAGE_NAMES.AD_2, stageInfo: { applicants: [{ marketing_post: 'N', marketing_mobile_message: 'N', marketing_email: 'N', marketing_phone_all: 'N', marketing_phone_rm: 'N' }] } } ],
      },
    });
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: "marketing_phone_all", rwb_label_name: "Marketing Phone All" }} handleCallback={jest.fn()} updateCheckboxStatus={jest.fn()} />
      </Provider>
    );

    const checkbox = screen.getByLabelText("Marketing Phone All");
    fireEvent.click(checkbox);

    const popup = screen.getByText(/choose again/i); // Ensure that some text in the popup is found
    expect(popup).toBeInTheDocument(); // Verify that popup is shown
  });

  // More tests can be added to cover other functionalities
});
