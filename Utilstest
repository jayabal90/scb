import { getFields } from './path-to-your-getFields-file'; // Adjust the import path as necessary
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { AppDispatch } from "../../../services/common-service"; // Adjust the import path as necessary

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

describe('getFields', () => {
    let store;

    beforeEach(() => {
        store = mockStore({ /* initial state if needed */ });
    });

    it('should return new fields for valid input', async () => {
        const getStages = [
            {
                stageId: 'stage1',
                stageInfo: {
                    fieldMetaData: {
                        data: {
                            stages: [
                                {
                                    fields: [
                                        { logical_field_name: 'country_of_tax_residence' },
                                        { logical_field_name: 'tax_id_no' }
                                    ]
                                }
                            ]
                        }
                    }
                }
            }
        ];

        const taxSelector = {
            maxCount: 3,
            fields: ['country_1', 'tax_1']
        };

        const result = await store.dispatch(getFields(getStages, taxSelector, 'someAction'));

        expect(result).toEqual([
            { logical_field_name: 'country_1' },
            { logical_field_name: 'tax_1' }
        ]);
    });

    it('should handle missing fields gracefully', async () => {
        const getStages = [
            {
                stageId: 'stage1',
                stageInfo: {
                    fieldMetaData: {
                        data: {
                            stages: [
                                {
                                    fields: []
                                }
                            ]
                        }
                    }
                }
            }
        ];

        const taxSelector = {
            maxCount: 3,
            fields: []
        };

        const result = await store.dispatch(getFields(getStages, taxSelector, 'someAction'));

        expect(result).toEqual([]);
    });

    it('should return new fields with sequence creation', async () => {
        const getStages = [
            {
                stageId: 'stage1',
                stageInfo: {
                    fieldMetaData: {
                        data: {
                            stages: [
                                {
                                    fields: [
                                        { logical_field_name: 'country_of_tax_residence' },
                                        { logical_field_name: 'tax_id_no' }
                                    ]
                                }
                            ]
                        }
                    }
                }
            }
        ];

        const taxSelector = {
            maxCount: 3,
            fields: ['country_1', 'tax_1', 'country_2']
        };

        const result = await store.dispatch(getFields(getStages, taxSelector, 'someAction'));

        expect(result).toEqual([
            { logical_field_name: 'country_2' },
            { logical_field_name: 'tax_2' }
        ]);
    });
});
