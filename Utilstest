import { stageFields, userInputPayload, stageSelectFields } from './path/to/your/module'; 
import { stagesAction } from "../../../utils/store/stages-slice";
import configureStore from 'redux-mock-store';
import { render } from '@testing-library/react';
import thunk from 'redux-thunk';

// Setup Redux mock store
const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe('Stage Utility Functions', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      stages: {
        // initial state if needed
      }
    });
  });

  test('stageFields should correctly group fields based on stageId', () => {
    const stageSelector = [{
      stageInfo: {
        fieldMetaData: {
          data: {
            stages: [
              {
                fields: [
                  { logical_field_name: 'field1', rwb_category: 'bd-1' },
                  { logical_field_name: 'field2', rwb_category: 'bd-1' },
                ]
              }
            ]
          }
        },
        application: 'dummy_application'
      }
    }];
    
    const result = stageFields(stageSelector, 'bd-1');
    
    expect(result.fields).toBeDefined();
    expect(result.fields.length).toBeGreaterThan(0); // Make assertions about the expected structure
  });

  test('stageSelectFields should return fields based on input stageSelector', () => {
    const stageSelector = [{
      stageInfo: {
        fieldMetaData: {
          data: {
            stages: [
              {
                fields: [
                  { logical_field_name: 'field1', rwb_category: 'bd-2' },
                ]
              }
            ]
          }
        },
        application: 'dummy_application'
      }
    }];

    const result = stageSelectFields(stageSelector, 'bd-2');
    
    expect(result.fields).toBeDefined();
    expect(result.fields.length).toEqual(1); // Expecting one field based on our defined input
  });

  test('userInputPayload should dispatch the correct actions', async () => {
    const applicantsSelector = {
      field1: 'value1',
      field2: 'value2',
      // Add more fields as necessary
    };
    
    const stageSelector = [
      {
        stageInfo: {
          applicants: [
            {
              field1_a_1: '',
              field2_a_1: ''
            }
          ]
        }
      }
    ];
    
    const expectedActions = [
      stagesAction.updateStageFields(expect.any(Object)) // Expect return action type
    ];
    
    store.dispatch(userInputPayload(applicantsSelector, stageSelector));
    
    const actions = store.getActions();
    
    expect(actions).toEqual(expectedActions);
  });
});
