import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Date from './Date'; // Adjust the import path accordingly
import { userAgeAction } from '../../../utils/store/age-slice';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';

const mockStore = configureStore([]);
const mockHandleCallback = jest.fn();
const mockHandleFieldDispatch = jest.fn();

// Mocking the required redux state
const initialState = {
    stages: {
        stages: [{ 
            stageId: 'ad-2', 
            stageInfo: {
                applicants: [{
                    expiry_date: '',
                    work_type: 'E002',
                    id_type_cb: ''
                }]
            }
        }],
        userInput: {
            applicants: [{ /* your applicant data */ }]
        }
    },
    fielderror: {
        error: ''
    }
};

describe('Date Component', () => {
    let store; 

    beforeEach(() => {
        store = mockStore(initialState);
    });

    test('renders the Date component', () => {
        render(
            <Provider store={store}>
                <Date data={{ logical_field_name: 'expiry_date', rwb_label_name: 'Expiry Date', mandatory: 'Yes' }} handleCallback={mockHandleCallback} handleFieldDispatch={mockHandleFieldDispatch} />
            </Provider>
        );

        expect(screen.getByLabelText(/Expiry Date/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText('DD')).toBeInTheDocument();
        expect(screen.getByPlaceholderText('MM')).toBeInTheDocument();
        expect(screen.getByPlaceholderText('YYYY')).toBeInTheDocument();
    });

    test('input accepts valid day, month, and year', () => {
        render(
            <Provider store={store}>
                <Date data={{ logical_field_name: 'expiry_date', rwb_label_name: 'Expiry Date', mandatory: 'Yes' }} handleCallback={mockHandleCallback} handleFieldDispatch={mockHandleFieldDispatch} />
            </Provider>
        );

        const dayInput = screen.getByPlaceholderText('DD');
        const monthInput = screen.getByPlaceholderText('MM');
        const yearInput = screen.getByPlaceholderText('YYYY');

        fireEvent.change(dayInput, { target: { value: '15' } });
        fireEvent.change(monthInput, { target: { value: '08' } });
        fireEvent.change(yearInput, { target: { value: '2023' } });

        expect(dayInput.value).toBe('15');
        expect(monthInput.value).toBe('08');
        expect(yearInput.value).toBe('2023');
    });

    test('shows error message for invalid date input', () => {
        render(
            <Provider store={store}>
                <Date data={{ logical_field_name: 'expiry_date', rwb_label_name: 'Expiry Date', mandatory: 'Yes' }} handleCallback={mockHandleCallback} handleFieldDispatch={mockHandleFieldDispatch} />
            </Provider>
        );

        const dayInput = screen.getByPlaceholderText('DD');
        const monthInput = screen.getByPlaceholderText('MM');
        const yearInput = screen.getByPlaceholderText('YYYY');

        fireEvent.change(monthInput, { target: { value: '15' } }); // Invalid month
        fireEvent.blur(monthInput); // Trigger validation

        expect(screen.getByText(/Month is not valid/i)).toBeInTheDocument();
    });

    // Add more tests as needed for different scenarios...
});
