import rulesUtils from './path/to/rulesUtils'; // adjust the import path as necessary
import { FieldsetModel, KeyWithAnyModel } from '../../utils/model/common-model';

describe('rulesUtils function', () => {
    it('should mark fields as editable based on nonEditable list', () => {
        const props: Array<Array<FieldsetModel>> = [
            [{
                logical_field_name: 'field1',
                fields: [{ logical_field_name: 'fieldA' }, { logical_field_name: 'fieldB' }]
            }]
        ];
        const validationObj = {
            nonEditable: [['fieldB']]
        };

        const result = rulesUtils(props, validationObj);

        expect(result[0].fields[0].editable).toBe(false); // fieldA should be editable
        expect(result[0].fields[1].editable).toBe(true);  // fieldB should not be editable
    });

    it('should set default_visibility to null for specific fields', () => {
        const props: Array<Array<FieldsetModel>> = [
            [{
                logical_field_name: 'field1',
                fields: [{ logical_field_name: 'monthly_installment_mortgage_payment' }]
            }]
        ];
        const validationObj = { nonEditable: [[]] };

        const result = rulesUtils(props, validationObj);
        
        expect(result[0].fields[0].default_visibility).toBe(null);  // should be null
    });

    it('should set default_visibility to "No" for hidden fields', () => {
        const props: Array<Array<FieldsetModel>> = [
            [{
                logical_field_name: 'fieldset1',
                fields: [{ logical_field_name: 'place_of_birth' }]
            }]
        ];
        const validationObj = { nonEditable: [[]] };

        const result = rulesUtils(props, validationObj);

        expect(result[0].fields[0].default_visibility).toBe('No');  // should be "No"
    });

    it('should filter out fields with default_visibility as "No"', () => {
        const props: Array<Array<FieldsetModel>> = [
            [{
                logical_field_name: 'fieldset1',
                fields: [
                    { logical_field_name: 'fieldA', default_visibility: 'Yes' },
                    { logical_field_name: 'place_of_birth', default_visibility: 'No' }
                ]
            }]
        ];
        const validationObj = { nonEditable: [[]] };

        const result = rulesUtils(props, validationObj);

        expect(result[0].fields.length).toBe(1); // only fieldA should be present
        expect(result[0].fields[0].logical_field_name).toBe('fieldA');
    });
});
