import React from 'react';
import { render } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { getFields } from './path/to/your/action/file';  // Adjust the import path
import { CONSTANTS } from "../../../utils/common/constants";
import { getLovData } from '../../../services/common-service'; // If necessary to mock

jest.mock('../../../services/common-service', () => ({
    getLovData: jest.fn(),
}));

const mockStore = configureStore();
const store = mockStore({});

describe('getFields action', () => {
    // Mock the dispatch function
    let dispatch;

    beforeEach(() => {
        dispatch = jest.fn();
    });

    it('should dispatch appropriate actions based on radioResidency input', () => {
        const userInputs = {
            applicants: [{
                investment_experience: CONSTANTS.LOV_DATA.YES,
                cash_needs: CONSTANTS.LOV_DATA.YES,
                decision: CONSTANTS.LOV_DATA.YES,
            }],
        };

        const getStages = [{ 
            stageId: 'bd-5', 
            stageInfo: {
                fieldMetaData: {
                    data: {
                        stages: [
                            { fields: [{ logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.INVESTMENT_EXPERIENCE }] },
                        ],
                    },
                }, 
                applicants: [{ 
                    investment_experience: CONSTANTS.LOV_DATA.YES,
                    cash_needs: CONSTANTS.LOV_DATA.YES,
                    decision: CONSTANTS.LOV_DATA.YES,
                }] 
            }
        }];
        
        const radioResidency = { 
            logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.INVESTMENT_EXPERIENCE, 
            value: CONSTANTS.LOV_DATA.YES 
        };

        const userAge = { userAge: 30 };
        const dynamicFieldSelector = {};
        const parentChildToggleSelector = { resFields: [] };

        // Call the action
        const action = getFields(getStages, radioResidency, userInputs, userAge, dynamicFieldSelector, parentChildToggleSelector);
        action(dispatch); // You'll need to simulate an async dispatch if your action is async.

        // Now assert that the right actions were dispatched
        expect(dispatch).toHaveBeenCalledWith(expect.any(Function)); // Check for the first dispatch
        
        // Further assertions can be performed based on the state changes and dispatches you expect
        expect(dispatch).toHaveBeenCalledWith({
            type: 'fieldError/removeMandatoryFields', // Adjust this based on your actual action type
            payload: expect.any(Array), // Look for an array or whatever the expected payload is
        });
        
        expect(getLovData).toHaveBeenCalledWith(CONSTANTS.LOGICAL_FIELD_NAMES.SUPPLEMENTARY_INVEST_EXPERINECE);
    });
});
