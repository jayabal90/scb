import React from 'react';
import { render, fireEvent, screen, cleanup } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Date from './Date'; // Adjust this path to your actual component location
import { userAgeAction, fieldErrorAction, lastAction } from '../../../utils/store'; // Adjust your imports

const mockStore = configureStore([]);
const initialState = {
  stages: { stages: [{ stageId: 'ad-2', stageInfo: { applicants: [{ work_type: 'E002' }] } }] },
  fielderror: { error: null },
  lastAccessed: { lastField: null }
};

const setup = (initialState) => {
  const store = mockStore(initialState);

  render(
    <Provider store={store}>
      <Date data={{ logical_field_name: 'test_field', rwb_label_name: 'Test Field', mandatory: "Yes" }} />
    </Provider>
  );

  return store;
};

describe('Date Component', () => {
  let store;

  beforeEach(() => {
    store = setup(initialState);
  });

  afterEach(() => {
    cleanup();
  });

  it('renders without crashing', () => {
    expect(screen.getByLabelText('Test Field')).toBeInTheDocument();
  });

  it('displays error message when invalid date is entered', () => {
    const dayInput = screen.getByPlaceholderText('DD');
    const monthInput = screen.getByPlaceholderText('MM');
    const yearInput = screen.getByPlaceholderText('YYYY');

    // Simulate entering invalid date
    fireEvent.change(dayInput, { target: { value: '32' } });
    fireEvent.change(monthInput, { target: { value: '13' } });
    fireEvent.change(yearInput, { target: { value: '2020' } });

    // Check for error messages, assuming your component sets an error state accordingly
    expect(screen.getByText(/Date is not valid/i)).toBeInTheDocument();
  });

  it('dispatches actions correctly on valid date', () => {
    const dayInput = screen.getByPlaceholderText('DD');
    const monthInput = screen.getByPlaceholderText('MM');
    const yearInput = screen.getByPlaceholderText('YYYY');

    // Simulate entering valid date
    fireEvent.change(dayInput, { target: { value: '15' } });
    fireEvent.change(monthInput, { target: { value: '05' } });
    fireEvent.change(yearInput, { target: { value: '2000' } });

    // Verify if dispatch is called
    const actions = store.getActions();
    expect(actions).toContainEqual(
      expect.objectContaining({
        type: fieldErrorAction.removeToggleFieldError.type,
      })
    );
  });

  // Add more tests for edge cases and other functionalities
});
