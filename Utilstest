import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Button } from './Button'; // Adjust the import based on your file structure
import { useDispatch, useSelector } from 'react-redux';

// Mock the useDispatch and useSelector hooks
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

describe('Button Component', () => {
  const mockDispatch = jest.fn();
  const mockSelector = {
    stages: {
      stages: [], // Add initial state as needed for your tests
      userInput: {
        applicants: [{
          res_name_of_street_1: 'Street 1',
          res_building_estate_1: 'Building 1',
          res_room_flat_1: 'Room 1',
        }]
      }
    },
    tax: { count: 1, maxCount: 5 },
  };
  
  beforeEach(() => {
    // Clear mock data before each test
    jest.clearAllMocks();
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation(callback => callback(mockSelector));
  });

  test('renders button with correct props', () => {
    const props = {
      data: {
        logical_field_name: 'add_tax_residence',
        rwb_label_name: 'Add Tax Residence',
        regex: ''
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
      value: '',
    };

    const { getByTestId } = render(<Button {...props} />);

    expect(getByTestId('button')).toBeInTheDocument();
    expect(getByTestId('button')).toHaveValue('Add Tax Residence');
  });

  test('clicking the button calls userInput function', () => {
    const props = {
      data: {
        logical_field_name: 'add_tax_residence',
        rwb_label_name: 'Add Tax Residence',
        regex: ''
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
      value: '',
    };

    const { getByTestId } = render(<Button {...props} />);   
    fireEvent.click(getByTestId('button'));

    // Expect userInput to be called with correct argument
    expect(mockDispatch).toHaveBeenCalledTimes(1); // Ensure dispatch was called
  });

  test('hides button when taxSelector count exceeds maxCount', () => {
    mockSelector.tax.count = 6; // Set count higher than maxCount
    const props = {
      data: {
        logical_field_name: 'add_tax_residence',
        rwb_label_name: 'Add Tax Residence',
        regex: ''
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
      value: '',
    };

    const { getByTestId } = render(<Button {...props} />);
    
    // Button should be hidden due to updated taxSelector
    expect(getByTestId('button')).not.toBeVisible();
  });
});
