import configureStore from 'redux-mock-store';
import { AppDispatch } from '../../../services/common-service';
import { getFields } from './yourModulePath'; // Adjust according to your file structure
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import thunk from 'redux-thunk';
import { CONSTANTS } from '../../../utils/common/constants';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

let store;

beforeEach(() => {
    store = mockStore({
        fieldError: {},
        stages: {},
    });
});

test('should dispatch fieldErrorAction and stagesAction correctly', () => {
    const getStages = [
        {
            stageId: 'bd-5',
            stageInfo: {
                fieldMetaData: {
                    data: {
                        stages: [
                            {
                                fields: [
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.INVESTMENT_EXPERIENCE },
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_INSTITUTION },
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_PRODUCT },
                                    { logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.SUPPLEMENTARY_INVEST_EXPERINECE },
                                ],
                            },
                        ],
                    },
                },
                applicants: [
                    {
                        cash_needs: CONSTANTS.LOV_DATA.YES,
                        decision: CONSTANTS.LOV_DATA.NO,
                        education_level: 'some_education_level',
                        investment_experience: CONSTANTS.LOV_DATA.YES,
                    },
                ],
            },
        },
    ];

    const radioResidency = {
        logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.INVESTMENT_EXPERIENCE,
        value: CONSTANTS.LOV_DATA.YES,
    };

    const userInputs = {
        applicants: [
            {
                investment_experience: CONSTANTS.LOV_DATA.YES,
            },
        ],
    };

    const userAge = { userAge: 30 };
    const dynamicFieldSelector = {};
    const parentChildToggleSelector = { resFields: [] };

    const expectedActions = [
        // Ensure these actions match what your application should dispatch.
        // Add your expected actions here from `fieldErrorAction` and `stagesAction`.
    ];

    const expectedStageComponents = [
        // Expected stage components based on the test scenario.
    ];

    return store.dispatch(getFields(getStages, radioResidency, userInputs, userAge, dynamicFieldSelector, parentChildToggleSelector))
        .then(() => {
            const actions = store.getActions();

            // Check that the expected actions were dispatched
            expect(actions).toEqual(expectedActions);

            // You can also test the returned value (stage components)
            expect(expectedStageComponents).toEqual(stageComponents); // Adjust accordingly
        });
});
