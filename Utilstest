import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { useSelector as mockUseSelector, useDispatch as mockUseDispatch } from 'react-redux';
import AuthorizeComponent from './path-to-your-component/AuthorizeComponent'; // Adjust the path accordingly
import { ValueUpdateAction } from "../../../utils/store/value-update-slice";
import { checkboxAction } from "../../../utils/store/checkbox-slice";

const mockStore = configureStore([]);

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

describe('AuthorizeComponent Tests', () => {
  let store: any;
  const mockDispatch = jest.fn();

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: 'AD_2', stageInfo: { applicants: [{}] } }],
      },
      checkboxSlice: { selectedvalue: '' },
      fielderror: { error: false },
    });

    // Reset mocks
    mockDispatch.mockClear();
    (mockUseDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (mockUseSelector as jest.Mock)
      .mockImplementation((selectorFn: any) => {
        // Define what the selector should return based on its input
        switch (selectorFn(store.getState())) {
          case store.getState().checkboxSlice.selectedvalue:
            return '';
          case store.getState().stages:
            return store.getState().stages.stages;
          case store.getState().fielderror:
            return store.getState().fielderror.error;
          // Add other cases as needed for your tests
          default:
            return null;
        }
      });
  });

  it('should render the component correctly', () => {
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: 'marketing_post', rwb_label_name: 'Post Marketing' }} handleCallback={jest.fn()} />
      </Provider>
    );

    expect(screen.getByLabelText(/Post Marketing/i)).toBeInTheDocument();
  });

  it('should dispatch the updateCheckbox action when checkbox is changed', () => {
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: 'marketing_post', rwb_label_name: 'Post Marketing' }} handleCallback={jest.fn()} />
      </Provider>
    );

    const checkbox = screen.getByLabelText(/Post Marketing/i);
    fireEvent.click(checkbox);

    expect(mockDispatch).toHaveBeenCalledWith(ValueUpdateAction.getChangeUpdate(expect.any(Object)));
    expect(mockDispatch).toHaveBeenCalledWith(checkboxAction.updateCheckbox(expect.any(Array)));
  });

  it('should show a popup when all checkboxes are unchecked', () => {
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: 'marketing_post', rwb_label_name: 'Post Marketing' }} handleCallback={jest.fn()} />
      </Provider>
    );

    const checkbox = screen.getByLabelText(/Post Marketing/i);
    fireEvent.click(checkbox);

    // Simulate scenario where all checkboxes are unchecked
    fireEvent.click(checkbox); // Uncheck

    expect(screen.getByText(/empty_check/i)).toBeInTheDocument(); // Assuming "empty_check" is the name of the popup
  });

  // Additional tests can be added following the same pattern
});
