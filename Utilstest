import thunk from "redux-thunk";
import configureStore from "redux-mock-store";
import { getFields } from "./path/to/getFields"; // Adjust the import path
import { fieldErrorAction } from "../../../utils/store/field-error-slice";
import { stagesAction } from "../../../utils/store/stages-slice";
import { getLovData } from "../../../services/common-service";
import { CONSTANTS } from "../../../utils/common/constants";

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe("getFields action creator", () => {
    let store;

    beforeEach(() => {
        store = mockStore({});
    });

    it("should dispatch actions when radioResidency changes to Exit-Entry Permit", async () => {
        const getStages = [
            {
                stageId: "test",
                stageInfo: {
                    fieldMetaData: {
                        data: {
                            stages: [
                                {
                                    fields: [
                                        { logical_field_name: "EEP" },
                                        { logical_field_name: "expiry_date" },
                                        { logical_field_name: "passport_no" }
                                    ]
                                }
                            ]
                        }
                    },
                    applicants: [{}]
                }
            }
        ];
        
        const radioResidency = {
            logical_field_name: 'id_type_cb',
            value: 'Exit-Entry Permit'
        };
        
        const expectedActions = [
            fieldErrorAction.removeMandatoryFields(["passport_no"]),
            stagesAction.removeAddToggleField({
                removeFields: ["passport_no"],
                newFields: ["EEP", "expiry_date"],
                value: ''
            })
        ];

        await store.dispatch(getFields(getStages, radioResidency));
        const actions = store.getActions();

        // Verify the correct actions have been dispatched
        expect(actions).toEqual(expect.arrayContaining(expectedActions));
    });

    it("should dispatch actions for investment experience scenarios", async () => {
        const getStages = [
            // Mock your stages here
        ];
        
        const radioResidency = {
            logical_field_name: CONSTANTS.LOGICAL_FIELD_NAMES.INVESTMENT_EXPERIENCE,
            value: "some value"
        };

        const userInputs = { applicants: [{ investment_experience: CONSTANTS.LOV_DATA.YES }] };
        const userAge = { userAge: 30 };

        const expectedActions = [
            fieldErrorAction.getMandatoryFields(["some_field"]),
            stagesAction.updateDynamicFields({ 'label': CONSTANTS.LOGICAL_FIELD_NAMES.FINANCIAL_INSTITUTION, 'value': '' }),
            // Add other expected actions as per your logic
        ];

        await store.dispatch(getFields(getStages, radioResidency, userInputs, userAge));
        const actions = store.getActions();

        // Verify the actions
        expect(actions).toEqual(expect.arrayContaining(expectedActions));
    });

    // Add more test cases as needed for various scenarios

});
