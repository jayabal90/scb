import React from 'react';
import { shallow } from 'enzyme';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import AuthorizeComponent from './AuthorizeComponent'; // Adjust the import based on your file structure
import * as constants from '../../../utils/common/constants';

const mockStore = configureStore([]);
const initialState = {
  stages: {
    stages: [
      {
        stageId: constants.STAGE_NAMES.AD_2,
        stageInfo: {
          applicants: [{
            marketing_post: 'Y',
            marketing_mobile_message: 'Y',
            marketing_email: 'Y',
            marketing_phone_all: 'Y',
            marketing_phone_rm: 'N',
          }],
        },
      },
    ],
  },
  checkboxSlice: {
    selectedvalue: null, // or appropriate initial value
  },
  fielderror: {
    error: null, // or appropriate initial value
  },
};

describe('<AuthorizeComponent />', () => {
  let store;
  let wrapper;

  const mockProps = {
    data: {
      logical_field_name: 'marketing_post',
      rwb_label_name: 'Post Marketing',
      info_tooltips: 'Info about Post Marketing',
      details: 'Detailed info about Post Marketing',
    },
    handleCallback: jest.fn(),
    updateCheckboxStatus: jest.fn(),
  };

  beforeEach(() => {
    store = mockStore(initialState);
    wrapper = shallow(
      <Provider store={store}>
        <AuthorizeComponent {...mockProps} />
      </Provider>
    ).dive().dive(); // Use .dive() to get to the component without the Provider
  });

  it('should render without crashing', () => {
    expect(wrapper.exists()).toBe(true);
  });

  it('should have the checkbox checked when marketing_post is Y', () => {
    const checkbox = wrapper.find('input[type="checkbox"]');
    expect(checkbox.prop('checked')).toBe(true);
  });

  it('should call handleCallback when checkbox is changed', () => {
    const checkbox = wrapper.find('input[type="checkbox"]');
    checkbox.simulate('change', { target: { checked: false, value: 'N' } });
    
    expect(mockProps.handleCallback).toHaveBeenCalled();
    expect(mockProps.updateCheckboxStatus).toHaveBeenCalled();
  });
  
  it('should show a popup when checkbox is unchecked and confirm_direct_marketing is true', () => {
    // Simulate unchecking the checkbox
    const checkbox = wrapper.find('input[type="checkbox"]');
    checkbox.simulate('change', { target: { checked: false, value: 'N' } });
    
    // Assuming your logic sets showPopup to true
    expect(wrapper.find('Model')).toHaveLength(1); // Check if the modal shows up
  });

  // Add more tests based on the application's logic and requirements
});
