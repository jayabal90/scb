import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import AuthorizeComponent from './AuthorizeComponent'; // Adjust the import based on your file structure
import { checkboxAction } from '../../../utils/store/checkbox-slice';
import { ValueUpdateAction } from '../../../utils/store/value-update-slice';

const mockStore = configureStore([]);

describe('AuthorizeComponent', () => {
  let store: any;
  const stageSelectorMock = {
    stages: [
      {
        stageId: 'AD_2',
        stageInfo: {
          applicants: [{}]
        }
      }
    ]
  };

  beforeEach(() => {
    store = mockStore({
      stages: stageSelectorMock,
      checkboxSlice: { selectedvalue: JSON.stringify([]) },
      fielderror: { error: null }
    });

    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: 'marketing_post', rwb_label_name: 'Marketing Post' }} />
      </Provider>
    );

    expect(screen.getByLabelText(/Marketing Post/i)).toBeInTheDocument();
  });

  test('checkbox toggles correctly', () => {
    const handleCallback = jest.fn();
  
    render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: 'marketing_post', rwb_label_name: 'Marketing Post', handleCallback }} />
      </Provider>
    );
    
    const checkbox = screen.getByLabelText(/Marketing Post/i);
    expect(checkbox).not.toBeChecked();

    fireEvent.click(checkbox);
    
    expect(checkbox).toBeChecked();
    expect(handleCallback).toHaveBeenCalledWith('marketing_post', 'Y');
    
    fireEvent.click(checkbox);
    
    expect(checkbox).not.toBeChecked();
    expect(handleCallback).toHaveBeenCalledWith('marketing_post', 'N');
  });

  test('dispatches actions correctly upon checkbox change', () => {
    const dispatch = jest.fn();
    
    store.dispatch = dispatch;
    
    const { getByLabelText } = render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: 'marketing_post', rwb_label_name: 'Marketing Post' }} />
      </Provider>
    );

    const checkbox = getByLabelText(/Marketing Post/i);
    
    fireEvent.click(checkbox);
    
    expect(dispatch).toHaveBeenCalledWith(ValueUpdateAction.getChangeUpdate({ id: 'AD_2', changes: true }));
    expect(dispatch).toHaveBeenCalledWith(checkboxAction.updateCheckbox([]));
  });

  test('shows popup when all marketing options are unchecked', () => {
    const { getByLabelText } = render(
      <Provider store={store}>
        <AuthorizeComponent data={{ logical_field_name: 'marketing_post', rwb_label_name: 'Marketing Post' }} />
      </Provider>
    );

    const checkbox = getByLabelText(/Marketing Post/i);
    fireEvent.click(checkbox); // Check the box
    fireEvent.click(checkbox); // Uncheck the box

    // Assuming other relevant states and conditions are met for the popup to show
    expect(screen.getByText(/Choose Again/i)).toBeInTheDocument();
  });
});
