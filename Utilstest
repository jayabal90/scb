import React from 'react';
import { render } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import Display from './Display';
import { mockedStore } from './mockedStore'; // You'll need to create a mocked store

// Create a simple reducer to support the mocked store
const initialState = {
  stages: {
    stages: [{ stageInfo: { applicants: [{ res_name_of_street_1: '', res_building_estate_1: '', res_room_flat_1: '', alt_address_same_as_res_address_2: 'N' }] }] }],
    userInput: { applicants: [{ res_name_of_street_1: '', res_building_estate_1: '', res_room_flat_1: '' }] },
  },
  lovDesc: {},
};

const rootReducer = (state = initialState, action) => {
  switch (action.type) {
    default:
      return state;
  }
};

const store = createStore(rootReducer);

// Create a mock function for the props
const mockProps = {
  data: {
    logical_field_name: 'residential_address_chn',
    component_type: 'Text',
    label_length: 20,
    rwb_label_name: 'Residential Address',
    default_visibility: null,
  },
};

describe('Display Component', () => {
  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Display {...mockProps} />
      </Provider>
    );
  });

  test('displays the correct label', () => {
    const { getByText } = render(
      <Provider store={store}>
        <Display {...mockProps} />
      </Provider>
    );

    expect(getByText(/Residential Address/i)).toBeInTheDocument();
  });

  test('shows the default value when the data is empty', () => {
    const emptyProps = {
      data: {
        logical_field_name: 'residential_address_chn',
        component_type: 'Text',
        label_length: 20,
        rwb_label_name: 'Residential Address',
        default_visibility: null,
      },
    };

    const { getByText } = render(
      <Provider store={store}>
        <Display {...emptyProps} />
      </Provider>
    );

    expect(getByText('')).toBeInTheDocument(); // Modify this based on your expected output
  });

  test('handles condition to show Chinese residential address', () => {
    const chnProps = {
      data: {
        logical_field_name: 'residential_address_chn',
        component_type: 'Text',
        label_length: 20,
        rwb_label_name: 'Residential Address (CN)',
        default_visibility: null,
      },
    };

    const { getByText } = render(
      <Provider store={store}>
        <Display {...chnProps} />
      </Provider>
    );

    expect(getByText(/Residential Address \(CN\)/i)).toBeInTheDocument(); // Modify this based on your expected output
  });

  // Add more tests here based on your requirements
});
