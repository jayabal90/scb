import { getFields } from '../path/to/getFields';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe('getFields', () => {
    let store;
    let dispatch;

    beforeEach(() => {
        store = mockStore({});
        dispatch = jest.fn();
    });

    it('should dispatch actions correctly when RES_COUNTRY_1 is selected as CHINESE_MAINLAND', () => {
        const getStages = [
            {
                stageId: 'bd-3',
                stageInfo: {
                    fieldMetaData: {
                        data: {
                            stages: [
                                {
                                    fields: [{ logical_field_name: 'RES_COUNTRY_1' }]
                                }
                            ]
                        }
                    }
                }
            }
        ];

        const radioResidency = {
            logical_field_name: 'RES_COUNTRY_1',
            value: 'CHINESE_MAINLAND'
        };

        const userInputs = { applicants: [{ NATURE_OF_EMPLOYER: 'Employer' }] };
        
        const parentChildToggleSelector = { addSelectFields: [] };

        store.dispatch(getFields(getStages, radioResidency, userInputs, parentChildToggleSelector));
        
        expect(dispatch).toHaveBeenCalledWith(
            fieldErrorAction.removeMandatoryFields(expect.any(Array))
        );

        expect(dispatch).toHaveBeenCalledWith(enumerate([
            stagesAction.removeAddToggleField({
                removeFields: expect.any(Array), // Add appropriate assertions as needed
                newFields: [],
                value: ''
            }),
        ]));
        // Test all necessary dispatch calls and resulting behavior
    });

    it('should dispatch actions correctly when WORK_TYPE_2 is selected', () => {
        const getStages = [
            {
                stageId: 'bd-4',
                stageInfo: {
                    fieldMetaData: {
                        data: {
                            stages: [
                                {
                                    fields: [{ logical_field_name: 'NATURE_OF_EMPLOYER' }]
                                }
                            ]
                        }
                    }
                }
            }
        ];

        const radioResidency = {
            logical_field_name: 'WORK_TYPE_2',
            value: 'H'
        };

        const userInputs = { applicants: [{ NATURE_OF_EMPLOYER: 'Employer' }] };

        const parentChildToggleSelector = { addSelectFields: [] };

        store.dispatch(getFields(getStages, radioResidency, userInputs, parentChildToggleSelector));
        
        expect(dispatch).toHaveBeenCalledWith(
            stagesAction.removeAddToggleField({
                removeFields: expect.arrayContaining(['NATURE_OF_EMPLOYER']),
                newFields: [],
                value: ''
            }),
        );
    });

    // Further tests based on different branches of logic and edge cases

    it('should return null if no valid stage fields are present', () => {
        const getStages = []; // no valid stage

        const radioResidency = null; // no radioResidency
        
        const result = store.dispatch(getFields(getStages, radioResidency, {}, {}, false));
        
        expect(result).toBeNull();
    });
});
