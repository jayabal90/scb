import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import RadioWithLabel from "./radio-with-label";

const mockStore = configureStore([]);

describe("RadioWithLabel Component", () => {
  let store: any;
  let handleCallbackMock: jest.Mock;
  let handleFieldDispatchMock: jest.Mock;

  const mockProps = {
    data: {
      logical_field_name: "test_field",
      rwb_label_name: "Test Radio Group",
      mandatory: "Yes",
      editable: false,
      info_tooltips: "Helpful Info",
      details: "Detailed Info",
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
  };

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: "BD_3", stageInfo: { applicants: [{ test_field: null }] } }],
        dynamicFields: {},
        parentChildFields: {},
        userInput: { applicants: [{}] },
        investmentToggle: false,
      },
      lov: {
        lov: [
          {
            label: "test_field",
            value: [
              { CODE_VALUE: "option1", CODE_DESC: "Option 1", checked: false },
              { CODE_VALUE: "option2", CODE_DESC: "Option 2", checked: false },
            ],
          },
        ],
      },
      fielderror: { error: [] },
      urlParam: { products: [] },
    });

    handleCallbackMock = jest.fn();
    handleFieldDispatchMock = jest.fn();
  });

  it("renders the RadioWithLabel component correctly", () => {
    render(
      <Provider store={store}>
        <RadioWithLabel
          {...mockProps}
          handleCallback={handleCallbackMock}
          handleFieldDispatch={handleFieldDispatchMock}
        />
      </Provider>
    );

    // Check if the label renders
    expect(screen.getByText("Test Radio Group")).toBeInTheDocument();

    // Check if radio buttons render
    const radioButtons = screen.getAllByRole("radio");
    expect(radioButtons).toHaveLength(2);

    // Check if tooltip renders
    expect(screen.getByText("Helpful Info")).toBeInTheDocument();
  });

  it("handles radio button selection", () => {
    render(
      <Provider store={store}>
        <RadioWithLabel
          {...mockProps}
          handleCallback={handleCallbackMock}
          handleFieldDispatch={handleFieldDispatchMock}
        />
      </Provider>
    );

    // Select the first radio button
    const firstRadio = screen.getByLabelText("Option 1");
    fireEvent.click(firstRadio);

    expect(handleCallbackMock).toHaveBeenCalledWith(
      mockProps.data,
      "option1"
    );
    expect(handleFieldDispatchMock).toHaveBeenCalledWith(
      "test_field",
      "option1",
      "Option 1"
    );
  });

  it("displays an error when no option is selected and mandatory field is required", () => {
    render(
      <Provider store={store}>
        <RadioWithLabel
          {...mockProps}
          handleCallback={handleCallbackMock}
          handleFieldDispatch={handleFieldDispatchMock}
        />
      </Provider>
    );

    // Trigger validation by leaving options unselected
    fireEvent.blur(screen.getByText("Test Radio Group"));

    // Check if error message appears
    expect(screen.getByText("Test Radio Group is required.")).toBeInTheDocument();
  });

  it("disables radio buttons when the field is not editable", () => {
    render(
      <Provider store={store}>
        <RadioWithLabel
          {...mockProps}
          handleCallback={handleCallbackMock}
          handleFieldDispatch={handleFieldDispatchMock}
        />
      </Provider>
    );

    const firstRadio = screen.getByLabelText("Option 1");
    expect(firstRadio).toBeDisabled();
  });
});
