import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import { RadioWithLabel } from './RadioWithLabel';
import rootReducer from '../../../utils/store'; // Adjust the path according to your store setup
import { CONSTANTS } from '../../../utils/common/constants';

// Mock the Redux store
const store = createStore(rootReducer, {
  stages: {
    stages: [{ stageId: CONSTANTS.STAGE_NAMES.BD_3, stageInfo: { applicants: [{}] } }],
    dynamicFields: {},
    parentChildFields: {},
    userInput: {},
    investmentToggle: false
  },
  lov: {
    lov: [
      { label: 'label1', value: [{ CODE_VALUE: '1', CODE_DESC: 'Option 1', checked: false }] },
      { label: 'label2', value: [{ CODE_VALUE: '2', CODE_DESC: 'Option 2', checked: false }] },
    ],
  },
  fielderror: {
    error: {},
  },
  userAge: { userAge: 65 }
});

describe('RadioWithLabel Component', () => {
  it('should render radio buttons correctly', () => {
    const mockHandleCallback = jest.fn();
    const mockHandleFieldDispatch = jest.fn();

    render(
      <Provider store={store}>
        <RadioWithLabel
          data={{
            logical_field_name: "test_field",
            rwb_label_name: "Test Label",
            info_tooltips: "This is an info tooltip",
            mandatory: "Yes",
            editable: true,
            logical_field_name: "gender"
          }}
          handleCallback={mockHandleCallback}
          handleFieldDispatch={mockHandleFieldDispatch}
        />
      </Provider>
    );

    // Check if the label is rendered
    expect(screen.getByLabelText(/Test Label/i)).toBeInTheDocument();

    // Check if two radio buttons are rendered
    const radioButtons = screen.getAllByRole('radio');
    expect(radioButtons.length).toBe(2); // Expect two radio buttons from the mock data

    // Simulate clicking on a radio button
    fireEvent.click(radioButtons[0]);
    
    // Check if callback function was called
    expect(mockHandleCallback).toHaveBeenCalled();
  });

  it('should show error message when required', () => {
    const mockHandleCallback = jest.fn();
    const mockHandleFieldDispatch = jest.fn();

    render(
      <Provider store={store}>
        <RadioWithLabel
          data={{
            logical_field_name: "test_field",
            rwb_label_name: "Test Label",
            info_tooltips: "This is an info tooltip",
            mandatory: "Yes",
            editable: true,
            logical_field_name: "gender"
          }}
          handleCallback={mockHandleCallback}
          handleFieldDispatch={mockHandleFieldDispatch}
        />
      </Provider>
    );

    // Since we don't select any radio, it should display an error message
    expect(screen.getByText(/Test Label required/i)).toBeInTheDocument();
  });
});
