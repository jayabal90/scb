import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import RadioWithLabel from './RadioWithLabel'; // adjust the import according to your file structure
import { CONSTANTS } from '../../../utils/common/constants';

const mockStore = configureStore([]);

// Sample props for the RadioWithLabel component
const defaultProps = {
  data: {
    logical_field_name: 'test_field',
    rwb_label_name: 'Test Label',
    mandatory: 'Yes',
    info_tooltips: 'Info Tooltip Content',
  },
  handleCallback: jest.fn(),
  handleFieldDispatch: jest.fn(),
};

describe('RadioWithLabel Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{ stageId: 'bd-3', stageInfo: { applicants: [{}] } }],
        dynamicFields: {},
        userInput: { applicants: [{}] },
      },
      lov: { lov: [] },
      fielderror: { error: {} },
      urlParam: { products: [] },
      userAge: { userAge: 50 },
    });
  });

  test('renders the radio button and label', () => {
    render(
      <Provider store={store}>
        <RadioWithLabel {...defaultProps} />
      </Provider>
    );

    // Check if the label is rendered
    expect(screen.getByText('Test Label')).toBeInTheDocument();

    // Check if the radio button is present
    const radio = screen.getByLabelText('Test Label');
    expect(radio).toBeInTheDocument();
  });

  test('triggers the callback on radio button change', () => {
    render(
      <Provider store={store}>
        <RadioWithLabel {...defaultProps} />
      </Provider>
    );

    const radio = screen.getByLabelText('Test Label');

    // Simulate a change event
    fireEvent.click(radio);

    // Check if the callback function was called with correct arguments
    expect(defaultProps.handleCallback).toHaveBeenCalledWith(defaultProps.data, expect.any(String));
  });

  test('displays error message when mandatory field is unchecked', () => {
    render(
      <Provider store={store}>
        <RadioWithLabel {...defaultProps} />
      </Provider>
    );

    // Check that the error message is not visible initially
    expect(screen.queryByText(/required mandatory/i)).not.toBeInTheDocument();

    // Simulating changes that would lead to an error
    // This logic may vary based on your implementation
    store.dispatch({ type: '@redux/UPDATE_FIELD_ERROR', payload: true }); // Simulating an error

    // Check for the presence of the error message
    expect(screen.getByText(/required mandatory/i)).toBeInTheDocument();
  });
});
