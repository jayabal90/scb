import React from "react";
import { render, fireEvent, screen } from "@testing-library/react";
import { useSelector, useDispatch } from "react-redux";
import MultiSelectionBox from "./MultiSelectionBox";
import { CONSTANTS } from "../../../utils/common/constants";
import errorMsg from "../../../assets/_json/error.json";

jest.mock("react-redux", () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

const mockDispatch = jest.fn();

describe("MultiSelectionBox Component", () => {
  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
  });

  const mockState = {
    lov: [
      {
        label: "testField",
        value: [
          { CODE_VALUE: "1", CODE_DESC: "Option 1" },
          { CODE_VALUE: "2", CODE_DESC: "Option 2" },
        ],
      },
    ],
    fielderror: { error: false },
    stages: {
      userInput: {
        applicants: [{ testField: "1,2" }],
      },
      stages: [],
    },
  };

  const mockProps = {
    data: {
      logical_field_name: "testField",
      rwb_label_name: "Test Label",
      max_selects: "2",
      mandatory: "Yes",
    },
    handleCallback: jest.fn(),
  };

  const setUp = (stateOverrides = {}) => {
    useSelector.mockImplementation((selectorFn) =>
      selectorFn({
        ...mockState,
        ...stateOverrides,
      })
    );
    render(<MultiSelectionBox {...mockProps} />);
  };

  it("renders component correctly with initial values", () => {
    setUp();
    expect(screen.getByLabelText("Test Label")).toBeInTheDocument();
    expect(screen.getByText("Option 1")).toBeInTheDocument();
    expect(screen.getByText("Option 2")).toBeInTheDocument();
  });

  it("shows options when dropdown is clicked", () => {
    setUp();
    const dropdownField = screen.getByLabelText("Test Label");
    fireEvent.click(dropdownField);

    expect(screen.getByText("Option 1")).toBeVisible();
    expect(screen.getByText("Option 2")).toBeVisible();
  });

  it("updates selected values when an option is checked", () => {
    setUp();
    const dropdownField = screen.getByLabelText("Test Label");
    fireEvent.click(dropdownField);

    const option1Checkbox = screen.getByLabelText("Option 1");
    fireEvent.click(option1Checkbox);

    expect(mockDispatch).toHaveBeenCalledWith(
      expect.objectContaining({
        type: expect.stringContaining("addLovData"),
        payload: expect.objectContaining({
          fieldData: {
            fieldName: "testField",
            code_desc: "Option 1",
            code_value: "1",
          },
        }),
      })
    );
  });

  it("handles removal of selected values", () => {
    setUp();
    const removeButton = screen.getByText("Option 1").closest(".multi-close");
    fireEvent.click(removeButton);

    expect(mockDispatch).toHaveBeenCalledWith(
      expect.objectContaining({
        type: expect.stringContaining("getChangeUpdate"),
        payload: expect.objectContaining({ changes: true }),
      })
    );
  });

  it("disables further selection after max_selects is reached", () => {
    setUp();
    const dropdownField = screen.getByLabelText("Test Label");
    fireEvent.click(dropdownField);

    const option1Checkbox = screen.getByLabelText("Option 1");
    const option2Checkbox = screen.getByLabelText("Option 2");
    fireEvent.click(option1Checkbox);
    fireEvent.click(option2Checkbox);

    const newOptionCheckbox = screen.getByLabelText("Option 2");
    expect(newOptionCheckbox).toBeDisabled();
  });

  it("displays an error message when no values are selected and mandatory", () => {
    setUp({ fielderror: { error: true } });

    expect(screen.getByText(errorMsg.multiSelectError + "Test Label")).toBeInTheDocument();
  });

  it("filters options based on search input", () => {
    setUp();
    const dropdownField = screen.getByLabelText("Test Label");
    fireEvent.click(dropdownField);

    const searchInput = screen.getByPlaceholderText(/search/i);
    fireEvent.change(searchInput, { target: { value: "Option 1" } });

    expect(screen.getByText("Option 1")).toBeVisible();
    expect(screen.queryByText("Option 2")).not.toBeInTheDocument();
  });

  it("calls handleCallback when values change", () => {
    setUp();
    const dropdownField = screen.getByLabelText("Test Label");
    fireEvent.click(dropdownField);

    const option1Checkbox = screen.getByLabelText("Option 1");
    fireEvent.click(option1Checkbox);

    expect(mockProps.handleCallback).toHaveBeenCalledWith(
      expect.objectContaining({ logical_field_name: "testField" }),
      expect.stringContaining("1")
    );
  });
});
