import React from "react";
import { render, fireEvent, screen } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import HKID from "../path/to/HKID";

jest.mock("react-redux", () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

describe("HKID Component", () => {
  const mockDispatch = jest.fn();

  const mockProps = {
    data: {
      logical_field_name: "hkidField",
      rwb_label_name: "Enter HKID",
      editable: false,
    },
    handleCallback: jest.fn(),
  };

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selector) =>
      selector({
        fielderror: { error: null },
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("renders correctly", () => {
    render(<HKID {...mockProps} />);

    // Verify that the label and input fields render
    expect(screen.getByText("Enter HKID")).toBeInTheDocument();
    expect(screen.getByRole("textbox", { name: "hkidField_1" })).toBeInTheDocument();
    expect(screen.getByRole("textbox", { name: "hkidField_2" })).toBeInTheDocument();
    expect(screen.getByRole("textbox", { name: "hkidField_3" })).toBeInTheDocument();
  });

  it("handles focus events correctly", () => {
    render(<HKID {...mockProps} />);

    const hk1Input = screen.getByRole("textbox", { name: "hkidField_1" });

    // Simulate focus event
    fireEvent.focus(hk1Input);
    expect(mockDispatch).toHaveBeenCalledWith({
      type: "lastAction/getField",
      payload: "hkidField",
    });
  });

  it("validates and updates hk1 field correctly", () => {
    render(<HKID {...mockProps} />);

    const hk1Input = screen.getByRole("textbox", { name: "hkidField_1" });

    // Simulate valid input
    fireEvent.change(hk1Input, { target: { value: "A" } });
    expect(hk1Input).toHaveValue("A");

    // Simulate invalid input
    fireEvent.change(hk1Input, { target: { value: "1" } });
    expect(screen.getByText("HKID number is invalid")).toBeInTheDocument();
    expect(mockDispatch).toHaveBeenCalledWith({
      type: "fieldErrorAction/getFieldError",
      payload: { fieldName: "hkidField" },
    });
  });

  it("validates and updates hk2 field correctly", () => {
    render(<HKID {...mockProps} />);

    const hk2Input = screen.getByRole("textbox", { name: "hkidField_2" });

    // Simulate valid input
    fireEvent.change(hk2Input, { target: { value: "123456" } });
    expect(hk2Input).toHaveValue("123456");

    // Simulate invalid input
    fireEvent.change(hk2Input, { target: { value: "123" } });
    expect(screen.getByText("HKID number is invalid")).toBeInTheDocument();
    expect(mockDispatch).toHaveBeenCalledWith({
      type: "fieldErrorAction/getFieldError",
      payload: { fieldName: "hkidField" },
    });
  });

  it("validates and updates hk3 field correctly", () => {
    render(<HKID {...mockProps} />);

    const hk3Input = screen.getByRole("textbox", { name: "hkidField_3" });

    // Simulate valid input
    fireEvent.change(hk3Input, { target: { value: "A" } });
    expect(hk3Input).toHaveValue("A");

    // Simulate invalid input
    fireEvent.change(hk3Input, { target: { value: "@" } });
    expect(screen.getByText("HKID number is invalid")).toBeInTheDocument();
    expect(mockDispatch).toHaveBeenCalledWith({
      type: "fieldErrorAction/getFieldError",
      payload: { fieldName: "hkidField" },
    });
  });

  it("disables inputs when `editable` is true", () => {
    const props = { ...mockProps, data: { ...mockProps.data, editable: true } };
    render(<HKID {...props} />);

    const hk1Input = screen.getByRole("textbox", { name: "hkidField_1" });
    const hk2Input = screen.getByRole("textbox", { name: "hkidField_2" });
    const hk3Input = screen.getByRole("textbox", { name: "hkidField_3" });

    // Check if inputs are disabled
    expect(hk1Input).toBeDisabled();
    expect(hk2Input).toBeDisabled();
    expect(hk3Input).toBeDisabled();
  });

  it("triggers handleCallback with the correct value", () => {
    render(<HKID {...mockProps} />);

    const hk1Input = screen.getByRole("textbox", { name: "hkidField_1" });
    const hk2Input = screen.getByRole("textbox", { name: "hkidField_2" });
    const hk3Input = screen.getByRole("textbox", { name: "hkidField_3" });

    // Input valid values
    fireEvent.change(hk1Input, { target: { value: "A" } });
    fireEvent.change(hk2Input, { target: { value: "123456" } });
    fireEvent.change(hk3Input, { target: { value: "7" } });

    // Check if handleCallback is called with the correct value
    expect(mockProps.handleCallback).toHaveBeenCalledWith(
      mockProps.data,
      "A1234567"
    );
  });
});
