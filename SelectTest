import React from "react";
import { render, fireEvent, screen } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import SelectionBox from "./SelectionBox"; // Adjust the import path as necessary
import { CONSTANTS } from "../../../utils/common/constants";
import { LovInputModel, LovInputValModel } from "../../../utils/model/common-model";

// Create a mock store
const mockStore = configureStore();
const store = mockStore({
  lov: {
    lov: [
      {
        label: "education_level",
        value: [
          { CODE_VALUE: "1", CODE_DESC: "High School", checked: false },
          { CODE_VALUE: "2", CODE_DESC: "Bachelor's", checked: false },
        ],
      },
    ],
  },
  stages: {
    stages: [{ stageId: CONSTANTS.STAGE_NAMES.BD_5 }],
    dependencyFields: {},
    userInput: {
      applicants: [{ education_level: "1" }],
    },
    cityDynamicField: { cityValue: "" },
    parentChildFields: {},
  },
  fielderror: { error: "" },
});

describe("SelectionBox component", () => {
  let props;

  beforeEach(() => {
    props = {
      data: {
        logical_field_name: "education_level",
        rwb_label_name: "Education Level",
        ui_defaulted_value: "1",
        mandatory: "Yes",
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };
  });

  test("renders the SelectionBox component", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...props} />
      </Provider>
    );

    expect(screen.getByLabelText(/Education Level/i)).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Education Level")).toBeInTheDocument();
  });

  test("shows options when clicked", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...props} />
      </Provider>
    );

    // Open dropdown
    fireEvent.click(screen.getByLabelText(/Education Level/i));
    expect(screen.getByText(/High School/i)).toBeInTheDocument();
    expect(screen.getByText(/Bachelor's/i)).toBeInTheDocument();
  });

  test("selects an option", () => {
    render(
      <Provider store={store}>
        <SelectionBox {...props} />
      </Provider>
    );

    // Open dropdown
    fireEvent.click(screen.getByLabelText(/Education Level/i));
    
    // Select option
    fireEvent.click(screen.getByLabelText(/High School/i));

    // Check if the callback is called with the selected value
    expect(props.handleCallback).toHaveBeenCalledWith(props.data, "1");
    expect(screen.getByDisplayValue(/High School/i)).toBeInTheDocument();
  });

  test("validates selection and shows an error", () => {
    props.data.mandatory = "Yes"; // setting the field as mandatory

    render(
      <Provider store={store}>
        <SelectionBox {...props} />
      </Provider>
    );

    // Open dropdown
    fireEvent.click(screen.getByLabelText(/Education Level/i));

    // Close the dropdown and simulate deselection
    fireEvent.click(screen.getByLabelText(/High School/i));

    expect(screen.getByText(/selectError/i)).toBeInTheDocument(); // You can change this to your specific error message
  });
});
