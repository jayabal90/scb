import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { useDispatch, useSelector } from 'react-redux';
import SelectionBox from './SelectionBox'; // Adjust the import path as necessary
import { CONSTANTS } from '../../../utils/common/constants'; // Adjust the path as necessary

// Create a mock store
const mockStore = configureStore();

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

describe('SelectionBox Component', () => {
  let mockDispatch = jest.fn();

  beforeEach(() => {
    // Set up the mocked implementation for useDispatch
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    
    // Provide a mocked state for useSelector
    (useSelector as jest.Mock).mockImplementation((selector) => {
      return selector({
        lov: {
          lov: [
            {
              label: "education_level",
              value: [
                { CODE_VALUE: "1", CODE_DESC: "High School", checked: false },
                { CODE_VALUE: "2", CODE_DESC: "Bachelor's", checked: false },
              ],
            },
          ],
        },
        stages: {
          stages: [{ stageId: CONSTANTS.STAGE_NAMES.BD_5 }],
          dependencyFields: {},
          userInput: {
            applicants: [{ education_level: "1" }],
          },
          cityDynamicField: { cityValue: "" },
          parentChildFields: {},
        },
        fielderror: { error: "" },
      });
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders the SelectionBox component', () => {
    const props = {
      data: {
        logical_field_name: 'education_level',
        rwb_label_name: 'Education Level',
        ui_defaulted_value: '1',
        mandatory: 'Yes',
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };

    render(
      <Provider store={mockStore({})}>
        <SelectionBox {...props} />
      </Provider>
    );

    expect(screen.getByLabelText(/Education Level/i)).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Education Level')).toBeInTheDocument();
  });

  test('opens dropdown and shows options', () => {
    const props = {
      data: {
        logical_field_name: 'education_level',
        rwb_label_name: 'Education Level',
        ui_defaulted_value: '1',
        mandatory: 'Yes',
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };

    render(
      <Provider store={mockStore({})}>
        <SelectionBox {...props} />
      </Provider>
    );

    // Open dropdown
    fireEvent.click(screen.getByLabelText(/Education Level/i));
    
    expect(screen.getByText(/High School/i)).toBeInTheDocument();
    expect(screen.getByText(/Bachelor's/i)).toBeInTheDocument();
  });

  test('selecting an option calls the callback function', () => {
    const props = {
      data: {
        logical_field_name: 'education_level',
        rwb_label_name: 'Education Level',
        ui_defaulted_value: '1',
        mandatory: 'Yes',
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };

    render(
      <Provider store={mockStore({})}>
        <SelectionBox {...props} />
      </Provider>
    );

    // Open dropdown
    fireEvent.click(screen.getByLabelText(/Education Level/i));
    
    // Select option
    fireEvent.click(screen.getByLabelText(/High School/i));

    // Check if the callback is called with the correct arguments
    expect(props.handleCallback).toHaveBeenCalledWith(props.data, '1');
  });

  test('handles errors for mandatory fields', () => {
    const props = {
      data: {
        logical_field_name: 'education_level',
        rwb_label_name: 'Education Level',
        ui_defaulted_value: '',
        mandatory: 'Yes',
      },
      handleCallback: jest.fn(),
      handleFieldDispatch: jest.fn(),
    };

    render(
      <Provider store={mockStore({})}>
        <SelectionBox {...props} />
      </Provider>
    );

    // Simulate opening the dropdown
    fireEvent.click(screen.getByLabelText(/Education Level/i));

    // Simulate not selecting any option
    fireEvent.click(screen.getByText(/Bachelor's/i)); // Uncheck rather than selecting a value presumably.

    // Check for error messages
    expect(screen.getByText(/selectError/i)).toBeInTheDocument(); // Adjust the error text accordingly
  });
});
